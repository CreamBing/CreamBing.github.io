<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java编程思想第四版第七章读书笔记]]></title>
    <url>%2F2019%2F01%2F13%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E4%B8%83%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的整理知识点，方便以后回顾，这一章主要讲解了java的复用类 正文1.组合语法满足has-a关系在类中，创建一个其它类的对象，使用该对象的一些方法，对这个对象进行操作。类中域为基本类型时能自动被初始化为0，对象引用会被初始化为Null。初始化类中的引用，可以在四种情况下进行：1、在定义对象的地方（在类的构造器调用之前就初始化了）2、在类的构造器中3、在需要使用这些对象之前（惰性初始化）4、使用实例初始化 2.继承语法使用继承我们一般认为导出类是一个或者像是一个，满足is-a或者is-like-a的关系，例如圆形是一个几何形当创建一个导出类对象时，该对象包含了一个基类子对象。当初始化时，构造器的调用遵循由内到外的顺序，默认情况下调用基类的无参构造器，基类构造器都有参时，可以用super(“参数”)显式的调用基类构造器。 3.代理代理和组合就是不满足继承关系，他们是包含关系，比如飞机包含控制系统当一个类并不是另一个类的子类型，却要完全或部分用到另一个类的全部方法时，可以用代理。在类Ship中创建另一个类的对象controls，然后构造所需要的全部方法，在方法里只需要使用相应的controls.方法。即可使用对象类的所有方法。 4.结合使用组合和继承虽然编译器强制初始化基类，但是不强制初始化成员对象，所有在用组合的时候应该注意要自己初始化成员对象。可以使用try finally强制对内存进行回收清理，自己编写函数回收内存，此时回收顺序是由外向内，最后使用super.dispose()回收基类内存。Java中导出类重载某个基类方法，它并不会屏蔽其在基类中的任何版本，也就是在参数列表类型符合的情况下，基类中的该方法依旧可用。@override是覆写关键字，如果添加这个注解而错误的重载（没有覆写）该方法，那么编译器会报错。覆写（override）：函数名一样，返回值类型，参数列表类型都一样。子类函数的访问权限不能小于父类。重载（overlode）：函数名一样，参数列表不一样，返回值类型可以相同也可以不同。以上两种都是程序多态性的体现。自己编写清理方法，不要使用finalize();1.可能永远不会调用，即使被调用也是按照他想要的顺序来回收123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155/** * Class Name: Share * Description: 清理，用来记录引用计数 * * author: CreamBing * time: 2019-01-11 14:32 * version: v1.0.0 */public class Share &#123; private int refcount = 0; private static long counter = 0; private final long id = ++counter; public Share() &#123; System.out.println("create"+this); &#125; public void addRef()&#123; refcount++; &#125; public int getRefcount() &#123; return refcount; &#125; protected void dispose()&#123; if(--refcount==0)&#123; System.out.println("dispose"+this); &#125; &#125; @Override public String toString() &#123; return "Share&#123;" + "refcount=" + refcount + ", id=" + id + '&#125;'; &#125; public static void main(String[] args) &#123; Share s1 = new Share(); Share s2 = new Share(); System.out.println("**********"); System.out.println(s1); System.out.println("************"); System.out.println(s2); &#125;&#125;/** * https://creambing.github.io Inc. * Copyright(c)2018-2025 All Rights Reserved. *//** * Class Name: Composing * Description: 共享类 * * author: CreamBing * time: 2019-01-11 14:42 * version: v1.0.0 */public class Composing &#123; private Share share; private static long count = 0; private final long id = ++count; public Composing(Share share) &#123; this.share = share; this.share.addRef(); System.out.println("create "+this); &#125; protected void dispose()&#123; System.out.println("dispose "+this); share.dispose(); &#125; @Override public String toString() &#123; return "Composing&#123;" + "share=" + share + ", id=" + id + '&#125;'; &#125;&#125;/** * Class Name: ReferenceCounting * Description: 对象引用计数 * &lt;p&gt; * author: CreamBing * time: 2019-01-11 14:48 * version: v1.0.0 */public class ReferenceCounting &#123; Share s1 = new Share(); Composing[] ca; public ReferenceCounting() &#123; this.ca = new Composing[]&#123;new Composing(s1), new Composing(s1), new Composing(s1)&#125;; &#125; @Override protected void finalize() throws Throwable &#123; if (s1.getRefcount() != 0) &#123; System.out.println("Composing没有清理干净，还有实例引用Share"); &#125; else &#123; System.out.println("Composing清理干净，开始垃圾回收"); super.finalize(); &#125; &#125; /** * createShare&#123;refcount=0, id=1&#125; * create Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=1&#125; * create Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * create Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=3&#125; * dispose Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=1&#125; * c[0] dispose * 开始强制垃圾回收 * ************************************* * dispose Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * dispose Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=3&#125; * disposeShare&#123;refcount=0, id=1&#125; * ca[1],ca[2]清理，所有Composing对象清理完毕 * 开始强制垃圾回收 * Composing清理干净，开始垃圾回收 * 注释掉********************************后面的东西 * createShare&#123;refcount=0, id=1&#125; * create Composing&#123;share=Share&#123;refcount=1, id=1&#125;, id=1&#125; * create Composing&#123;share=Share&#123;refcount=2, id=1&#125;, id=2&#125; * create Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=3&#125; * dispose Composing&#123;share=Share&#123;refcount=3, id=1&#125;, id=1&#125; * c[0] dispose * 开始强制垃圾回收 * ************************************* * Composing没有清理干净，还有实例引用Share * @param args */ public static void main(String[] args) &#123; ReferenceCounting r = new ReferenceCounting(); r.ca[0].dispose(); System.out.println("c[0] dispose"); System.out.println("开始强制垃圾回收"); System.runFinalizersOnExit(true); System.out.println("*************************************"); r.ca[1].dispose(); r.ca[2].dispose(); System.out.println("ca[1],ca[2]清理，所有Composing对象清理完毕"); System.out.println("开始强制垃圾回收"); System.runFinalizersOnExit(true); &#125;&#125; 5.在组合和继承之间选择is-a 继承hsa -a 组合 6.protected关键字关键字protected表明，就类用户而言，它是private的，就继承自此类的导出类或者其它位于同一个包的类来说，它是可以访问的。最好将域保持为private的，保留更改底层实现的权利。然后通过protected方法控制类的继承者的访问权限。 7.向上转型将导出类转型成基类，继承要慎用，需要向上转型时，推荐使用继承。向上转型会丢失方法和域 8.final关键字final数据：对于基本类型，final使数值恒定不变。对于对象的引用，final使引用恒定不变，但是对象自身是可以修改的。注意:数组也是一种引用。带有恒定初值（即：编译期常量）的final static 基本类型全用大写命名，并且字与字之间用下划线隔开。必须在域的定义处或者构造器中用表达式对final进行赋值，这真是final域在使用前总是初始化的原因。final参数：在函数参数列表中的final参数，在函数内无法修改它f(final int i){ i++; } //非法final方法：使用场景：1、把方法锁定，防止继承类修改，覆盖它。2、提高效率。（逐渐淘汰）类中所有的private方法都隐式地指定为final的。因为private方法无法被外界取用，所以并不算基类接口的一部分，所以尽管导出类含有相同名称的方法，但是互不干扰，也没有覆盖。 final类：使用场景：不可以作为基类被继承。 9.初始化及类的加载类的代码在初次使用时才会被加载，通常是指加载发生在创建类的第一个对象之时，在访问static域或static方法时，也会发生加载。注意，只要加载包含static方法的类，static初始化就会执行。注意子类创建对象调用构造器时基类构造器也会被调用，此时基类会被加载，基类的static将会被初始化。基类staitic–&gt;子类static–&gt;基类基本类型设为默认值0，对象引用被设为Null–&gt;基类构造器–&gt;子类基本类型设为默认值0，对象引用被设为Null–&gt;子类构造器 总结继承和组合都是从现有类型生成新类型，组合一般是将现有类型作为新类型的底层实现的一部分来加以复用，而继承复用的是接口，这对多态来说至关重要，所以分析一个系统的时候应该弄清楚那些是is-a,那些是has=a关系 参考资料https://blog.csdn.net/severusyue/article/details/49274695 Java编程思想第四版读书笔记——第七章 复用类 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>书籍</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第六章读书笔记]]></title>
    <url>%2F2019%2F01%2F13%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%85%AD%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的整理知识点，方便以后回顾，这一章主要讲解了java的访问权限控制 正文1.包:库单元Java代码文件，也可以成为编译单元（有时也成为转译单元）。编译单元内有一个public类，该类名称必须与文件名称相同。每个编译单元只能有一个public类。Java包命名规则是必须全是小写字母。package和import将单一的全局名字空间分开，使得不会出现名称冲突问题。想要使用某类，需要指定全名或者使用import关键字，import可以使用该包中的public类。使用静态导入 import static可以在系统中使用包中静态的方法。 jdk5之前需要设置classpath,那是因为引入jar需要指定jar的具体目录，因为java编译需要调用javac,5之前依赖tools.jar，相当与”javac -Calsspath=%JAVA_HOME%\lib\tools.jar xx.xxx.Main XXX.java”所以需要设置，jdk5之后不建议设置classpath,设置javahome的原因也是方便命令的输入 2.Java访问权限修饰词访问权限：不加修饰词，就是包访问权限。包内所有其他类对那个成员都有访问权限。对包外类都是private。取得某成员访问权限的唯一途径是：1、该成员是public2、不加权限修饰词并将其他类放在同一个包内，包内其它成员可访问此成员。3、继承而来的类既可以访问public又可以访问protected。4、通过访问器和变异器方法（get/set方法），以读取和改变值。 public:接口访问权限：任何人都可以访问它。不同包里的都可以。 默认包：对于隶属于相同目录却没有给自己设定任何包名称的文件，Java默认其为该目录的默认包里，这样它们之间的包访问权限可以使它们互相访问。private:私有除了包含该类成员的类（这个private成员在的类）之外，任何其他类都无法访问这个成员。好处：1、可以控制如何创建该对象，别人必须使用特定构造器创建，例如单例模式，如果默认构造器是唯一并且是自己定义的private构造器，那么它可以防止被继承2、对于辅助方法，可以指定其为private，防止误用它protected:继承访问权限protected成员除了只能被派生类使用外，还提供包访问权限。 3.接口和实现访问权限的控制常被称为具体实现的隐藏，这被便是“封装”。 4.类的访问权限1、每个编译单元（文件）只能有一个public类2、public类的名称必须与文件名相匹配，包括大小写.类只能是public或者包访问权限的，除了内部类单例模式的五种实现方式1.饿汉式(线程安全，调用效率高，但是不能延时加载)1234567public class ImageLoader&#123; private static ImageLoader instance = new ImageLoader(); private ImageLoader()&#123;&#125; public static ImageLoader getInstance()&#123; return instance; &#125; &#125; 上来就把单例对象创建出来了，要用的时候直接返回即可，这种可以说是单例模式中最简单的一种实现方式。但是问题也比较明显。单例在还没有使用到的时候，初始化就已经完成了。也就是说，如果程序从头到位都没用使用这个单例的话，单例的对象还是会创建。这就造成了不必要的资源浪费。所以不推荐这种实现方式。2.懒汉式(线程安全，调用效率不高，但是能延时加载)：12345678910111213141516public class SingletonDemo2 &#123; //类初始化时，不初始化这个对象(延时加载，真正用的时候再创建) private static SingletonDemo2 instance; //构造器私有化 private SingletonDemo2()&#123;&#125; //方法同步，调用效率低 public static synchronized SingletonDemo2 getInstance()&#123; if(instance==null)&#123; instance=new SingletonDemo2(); &#125; return instance; &#125;&#125; 3.Double CheckLock实现单例：DCL也就是双重锁判断机制（由于JVM底层模型原因，偶尔会出问题，不建议使用）1234567891011121314151617public class SingletonDemo5 &#123; private volatile static SingletonDemo5 SingletonDemo5; private SingletonDemo5() &#123; &#125; public static SingletonDemo5 newInstance() &#123; if (SingletonDemo5 == null) &#123; synchronized (SingletonDemo5.class) &#123; if (SingletonDemo5 == null) &#123; SingletonDemo5 = new SingletonDemo5(); &#125; &#125; &#125; return SingletonDemo5; &#125; &#125; 4.静态内部类实现模式（线程安全，调用效率高，可以延时加载）12345678910111213public class SingletonDemo3 &#123; private static class SingletonClassInstance&#123; private static final SingletonDemo3 instance=new SingletonDemo3(); &#125; private SingletonDemo3()&#123;&#125; public static SingletonDemo3 getInstance()&#123; return SingletonClassInstance.instance; &#125; &#125; 5.枚举类（线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化调用）123456789public enum SingletonDemo4 &#123; //枚举元素本身就是单例 INSTANCE; //添加自己需要的操作 public void singletonOperation()&#123; &#125;&#125; 如何选用：-单例对象 占用资源少，不需要延时加载，枚举 好于 饿汉-单例对象 占用资源多，需要延时加载，静态内部类 好于 懒汉式 5.总结控制对成员的访问有两个原因：1、是用户不要去触碰不该触碰的部分2、让库类设计者可以改变类内部工作的方式，而不必担心对客户端程序员产生重大影响。 参考资料https://blog.csdn.net/severusyue/article/details/49175943?utm_source=blogxgwz1 Java编程思想第四版读书笔记——第六章 访问权限控制 severusyuehttps://www.cnblogs.com/ngy0217/p/9006716.html java单例模式几种实现方式 点点积累]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>书籍</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第五章读书笔记]]></title>
    <url>%2F2019%2F01%2F11%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E4%BA%94%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的整理知识点，方便以后回顾，这一章主要讲解了java的初始化和清理 正文1.用构造器确保初始化使用构造器（constructor），在创建对象时初始化。分为带参数的初始化和不带参数的初始化。构造器初始化之前会先进行域的初始化，基本类型和String会被给予相应默认值 2.方法重载类型提升（向上提升）：int — long — float — double byte — short — int char — int窄化转换：和向上提升反过来，注意先考虑降到byte再考虑char返回值是无法区分重载方法的 3.默认构造器没有构造器的时候，系统会自动生成一个无参的默认构造器。如果写了构造器，就别指望系统生成了，所以如果写了带参构造器，就不能无参初始化了。另外只有私有构造器，该类无法继承 4.this关键字this关键字只能在方法内部使用，表示对“调用方法的那个对象”的引用。尽管可以用this调用一个构造器，但不能调用两个。当在一个构造器中调用另一个构造器时，需要用到this关键字。并且置于最起始处将自身传递到外部方法，必须用this关键字1234567891011121314151617181920public class Peeler &#123; //需要把工具类写出来 static Apple peel(Apple apple)&#123; System.out.println("皮削了"); return apple; &#125;&#125;public class Apple &#123; Apple getPeeled()&#123; return Peeler.peel(this); &#125; public static void main(String[] args) &#123; Apple a = new Apple(); a.getPeeled(); &#125;&#125; 除构造器外，编译器禁止在其他任何方法中调用构造器。static方法是没有this的方法。所以有些人认为static方法不是“面向对象”的，这个概念还是有争议的 5.清理：终结处理和垃圾回收垃圾回收器只知道释放那些经由new分配的内存。123对象可能不被垃圾回收。垃圾回收不等于“析构”。垃圾回收只与内存有关（使用垃圾回收器的唯一原因就是回收程序不再使用的内存）。 不应该将finalize()作为统一的清理方法，因为它可能不被执行，这是一个陷阱。无论是“垃圾回收”还是“终结”，都不保证一定会发生。finalize()还有一个有趣的用法，它并不依赖于每次都要对finalize()进行调用，这就是对象“终结条件”的验证。System.gc() 用于强制进行终结动作。比如强制进入finalize（随着程序的运行也许程序自己也会调用这个方法），当某个关系的标记量有异，打印出来。可供程序员找出程序代码尤其是创建对象时隐晦的缺陷。 垃圾回收器如何工作：Java虚拟机采用一种自适应的垃圾回收技术。要是没有新垃圾及产生，就会转换到 “标记——清扫”工作模式。“标记——清扫”所依据的思路同样是从堆栈和静态存储区出发，遍历所有的引用，进而找出存活的对象，给对象一个标记。全部标记工作完成后，清理动作才会开始。“停止——复制”的回收动作不是在后台运行的，它发生时，程序将会被暂停。它将所有活对象从旧堆复制到新堆，然后再释放旧堆中的对象所占内存。如果所有对象都很稳定，垃圾回收器的效率降低，就切换到“标记——清扫”方式，同样，Java虚拟机会追踪“标记——清扫”的效果，如果堆空间出现很多碎片，就会切换回“停止——复制”方式。Java虚拟机中有很多附加技术提升速度，比如“即时”编译器技术。这种技术将程序全部或部分翻译成本地机器码。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public class Practice11 &#123; @Override protected void finalize() throws Throwable &#123; System.out.println("我被清理了"); super.finalize(); &#125; /** * output * Try 1: * Try 2: * Try 3: * Try 4: * 我被清理了 * @param args */ public static void main(String[] args) &#123; Practice11 p = new Practice11(); System.out.println("Try 1: "); System.runFinalization(); System.out.println("Try 2: "); Runtime.getRuntime().runFinalization(); System.out.println("Try 3: "); System.gc(); System.out.println("Try 4: "); // using deprecated since 1.1 method: System.runFinalizersOnExit(true); &#125;&#125;//用于终结条件的判断public class Practice12 &#123; //默认true,满的 private boolean flag=true; public Practice12(boolean flag) &#123; this.flag = flag; &#125; @Override protected void finalize() throws Throwable &#123; if(flag)&#123; System.out.println("我是满的,我被清理了"); super.finalize(); &#125;else &#123; System.out.println("我不是满的,我不清理"); &#125; &#125; /** * output * true * false * 我不是满的,我不清理 * 我是满的,我被清理了 * @param args */ public static void main(String[] args)throws Exception &#123; Practice12 p = new Practice12(true); Practice12 p1 = new Practice12(false); System.runFinalizersOnExit(true); Thread.sleep(10000); //貌似会保证引用调用完被清理 System.out.println(p.flag); System.out.println(p1.flag); &#125;&#125; 6.成员的初始化所有变量在使用前都能得到适当的初始化。对于函数局部变量，Java以编译错误的形式强制初始化。不初始化编译就不成功。下面是各类型基本数据的初始值123456789 boolean false char [ ] byte 0 short 0 int 0 long 0 float 0.0 double 0.0 reference null 7.构造器的初始化无法阻止自动初始化的进行，它将在构造器被调用之前发生。因此，编译器不会强制一定在构造器某个地方或者在使用它们之前对元素进行初始化——因为初始化早已得到了保证。 静态数据初始化：静态数据只占用一份存储区域。静态初始化只有在必要时候进行。只有在第一个类型对象创建（或第一次访问静态数据）的时候，他们才会被初始化。此后，静态对象不会再被初始化。初始化顺序：静态对象（只一次）——&gt; 非静态对象——&gt;构造器可以使用静态块的方式，对静态对象成员进行初始化，放在static关键字后面，如下：123456public class Spoon &#123; static int i; static &#123; i = 47; &#125; &#125; 非静态实例初始化：12345678910111213public class Mug &#123; Mug mug1; Mug mug2; &#123; mug1 = new Mug(1); mug2 = new Mug(2); System.out.println("mug1 &amp; mug2 initialized"); &#125; Mug() &#123; &#125; Mug(int i) &#123; &#125;&#125; 如上，看起来比静态块少了个static关键字，它保证了每新建一个该类的对象，不论调用何种构造器，这些操作都会发生。实例初始化子句是发生在构造器之前执行.另外这种语法对于匿名内部类的初始化是必须的 8.数组初始化注意数组的别名问题。不确定在数组里需要多少个元素时，可以直接new。在运行时再创建。这里再提一下，数组元素中基本数据类型，数字和字符会被自动初始化为0，而布尔型会自动初始化为false。Array.toString()方法属于java.util标准类库，它将产生一维数组的可打印版本。试图使用数组中的空引用（null），则会在运行时产生异常。可变参数列表(C通常称之为varags)：所谓可变参数列表，可以理解为函数的参数列表中某类型的数量是不确定的。这个特性是在JavaSE5之后添加的。12345static void printArray(Object... args) &#123; for(Object obj : args) System.out.print(obj + &quot; &quot;); System.out.println(); &#125; 有了可变参数，就不用显示的编写数组语法了，当指定参数，编译器会自动填充数组。也就是输入一个列表，编译器会自动将其转化为数组，作为可变参数列表接受。0个参数传递给可变参数列表是可行的，当局有可选的尾随参数时，这一特性就会很有用。对于如下方法：123456 static void f(int required, String... trailing) &#123; System.out.print(&quot;required: &quot; + required + &quot; &quot;); for(String s : trailing) System.out.print(s + &quot; &quot;); System.out.println(); &#125; f(0)是可以代入的，尽管并没有String类型参数。getClass()方法属于Object的一部分，它将产生对象的类，并且在打印该类时，可以看到该类型的编码字符串。前导[表示int类型。它是这样用的：1234static void g(int... args) &#123; System.out.print(args.getClass()); System.out.println(&quot; length &quot; + args.length); &#125; 输出是这样的：12345 class [Ljava.lang.Character; length 1 class [Ljava.lang.Character; length 0 class [I length 1 class [I length 0 int[]: class [I 可以在单一的参数列表中将类型混合在一起，而自动包装机制将有选择的将Int提升为Integer。可变参数列表使重载变得复杂，编译器无法知道应该调用哪种方法。因此应当总是只在重载的一个版本上使用可变参数列表，或者压根不用。数组初始化的几种方式12345678910111213141516171819202122基本数据类型 int[] a = new int[10];//创建大小为10的int数组并自动初始化为零 int[] a1 = &#123;1,2&#125;;//创建并初始化 int[] a2 = new int[]&#123;1,2,4&#125;; int[] a3 = IntStream.of(1, 2, 3, 4, 5).toArray(); Arrays.stream(a).forEach(System.out::print); System.out.println(); Arrays.stream(a1).forEach(System.out::print); System.out.println(); Arrays.stream(a2).forEach(System.out::print); System.out.println();//对于包装类型 Integer[] b1 = &#123;1,2&#125;;//创建并初始化 Integer[] b2 = new Integer[]&#123;1,2,4&#125;; Integer[] b3 = Stream.of(1, 2, 3, 4, 5).toArray(Integer[]::new); //nullnullnullnullnullnullnullnullnullnull Integer[] b4 = new Integer[10]; //试图使用数组中的空引用，空指针异常 if(b4[0]==0)&#123; System.out.println(&quot;b4[0]==0&quot;); &#125; Stream.of(b4).forEach(System.out::print); 9.枚举类型ava SE5添加了enum关键字（枚举类型的实例都是常量，因此都用大写字母表示，如果有多个单词，就用下划线隔开。）创建一个枚举类型：123public enum Spiciness &#123; NOT,MILD,MEDIUM,HOT,FLAMING &#125; 创建enum实例：Spiciness howHot = Spiciness.MEDIUM;enum的一些特性：toString() 函数可以方便的显示某个实例的名字。ordinal() 函数可以显示某个特定enum常量的申明顺序。static values() 函数可以按照enum常量的申明顺序构成相应数组。枚举类型可以配合switch case使用。 参考资料https://blog.csdn.net/severusyue/article/details/48633599 Java编程思想第四版读书笔记——第五章 初始化与清理 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>书籍</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版第四章读书笔记]]></title>
    <url>%2F2019%2F01%2F10%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的整理知识点，方便以后回顾，这一章主要讲解了java的控制执行流程 正文1.true和falseJava不允许我们将一个数字作为布尔值使用，虽然这在C和C++里是允许的（在这些语句里，“真”是非零，“假”是零） 2.break和continuebreak用于强行退出循环，不执行循环中剩余的语句，只能跳出一层循环。而continue则停止执行当前的迭代（不执行本次循环的后续代码），然后退回循环起始处，开始下一次迭代。 3.臭名昭著的goto不提倡使用goto，会给程序带来毁灭性灾害。break和continue配合标签使用，效果更佳。12345一般continue会返回最内层循环的开头（顶部），并继续执行。带标签的continue会达到标签的位置，并重新进入紧接在那个标签后面的循环。一般break会中断并跳出当前循环。带标签的break会中断并跳出标签所指的循环。在Java里需要使用标签的唯一理由就是因为有循 在Java里需要使用标签的唯一理由就是因为有循环嵌套存在，从而想从多层嵌套中break或continue。 4.switchswitch中的选择因子必须是int或者char那样的整数值 参考资料https://blog.csdn.net/severusyue/article/details/48632345?utm_source=blogxgwz5 Java编程思想第四版读书笔记——第四章 控制执行流程 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>书籍</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java编程思想第四版前三章读书笔记]]></title>
    <url>%2F2019%2F01%2F08%2Fjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88%E5%89%8D%E4%B8%89%E7%AB%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言最近一段时间重读了java编程思想，把一些东西重新理解记录一遍 目的整理知识点，方便以后回顾 正文第一章 对象导论1.抽象过程:万物皆对象；程序是对象的集合，它们通过发送消息来告知彼此所要做的；每个对象都有自己的由其它对象构成的存储。每个对象都有其类型，每个对象都是某个类的一个实例（instance）;某一特定类型的所有对象都可以接受同样的消息。 2.每个对象都有一个接口每个对象都只能满足某些请求，这些请求是由对象的接口（interface）所定义的，决定接口的便是类型。 3.每个对象都提供服务将对象看做服务者可以提高对象的内聚性。高内聚性是软件设计的基本质量要求之一，可以将一个拥有很多功能的对象拆分成多个各司其职的对象。 4.被隐藏的具体实现为什么要进行访问控制？（1）让客户端程序员无法触及他们不该触及的部分——这些部分对于内部操作是必须的，但不是用户解决特定问题所需要的接口的一部分。减少客户端程序员需要考虑的东西，忽略不重要的东西。（2）允许库设计者可以改变内部的工作方式而不用担心会影响到客户端程序员 5.复用具体实现复用对象：（1）直接使用该类的对象；（2）创建一个成员对象；使用现有的类合成新的类，称为“组合”，如果组合是动态发生的，则称为“聚合”。在创建新类时，优先考虑组合，再考虑继承。上面的关系可以解读如下:123456(关联)Association：A类有B类有逻辑上的连接(聚合)Aggregation : A类有一个B类(组合)Composition : A类拥有一个B类(依赖)Dependency : A类使用了B类(继承)Inheritance : B类是一个A类 (或者B类扩展A类)(实现)Realization : B类实现了接口A 6.继承导出类和基类具有相同的类型即一个圆也是一个几何形有两种方法可以使基类和导出类产生差异12直接在导出类中添加新方法，这些新方法并不是基类接口的一部分，应该考虑的是基类是否应该具备这些方法另一种更重要的使基类和导出类之间产生差异的方法是改变现有基类的方法，称为覆盖 “是一个”和“像是一个”的关系如果继承只覆盖基类的方法，意味着导出类和基类是完全相同的类型，他们具有完全相同的接口，这被称为纯粹替代。某种意义上，是继承的理想方式，为is-a关系如果继承在导出类必须添加新的接口元素，扩展了接口，这种替代并不完美，为is-like-a(像是一个)关系 7.伴随多态的可交互对象将导出类看做它的基类的过程称为向上转型。方法可以在不知道对象的实际类型时，做出正确的行为。后期绑定 8.单根继承结构除了C++以外的所有OOP语言，所有类最终都继承自单一的基类。这个终极基类即Object;单根继承使所有对象都具有统一的接口，给编程带来了更大的灵活性。垃圾回收器的实现变的容易许多。C++如果这样，优点：额外的灵活性; 缺点：需要构建自己的继承体系，不兼容 9.容器不同的容器提供了不同类型的接口和外部行;不同的容器对于某些操作具有不同的效率为了避免向下转型为错误的类型，因此有了参数化类型机制，参数化类型就是一个编译器可以自动定制用于特定类型上的类。 10.对象的创建和生命周期对象的创建C++认为效率控制是最重要的议题，在堆栈或者静态存储区域创建对象。Java在创建对象的时候可以不用知道对象的确切数量，生命周期和类型。Java完全采用了动态内存分配的方式。它认为对象变得复杂后，查找和释放存储空间的开销就不那么那么重要了。提高灵活性，牺牲了时间。对象的生命周期Java提供了“垃圾回收器”机制，可以自动发现对象何时不再被使用，继而销毁它。垃圾回收器可以避免内存溢出的问题。 11.异常处理：处理错误异常是一种对象，它从出错地点被“抛出”，并被专门设计用来处理特定类型错误的相应的异常处理器“捕获”。异常不能忽略，所以它保证一定会在某处得到处理。它提供了一种从错误状况进行可靠恢复的路径。异常处理不是面向对象的特征。 12.并发编程使用线程，但是可能遇到一个隐患，就是共享资源的问题。某个任务锁定某项资源，完成其任务，然后释放资源锁，使其它任务可以使用这项资源。 13.Java与Internet客户/服务器系统的核心思想是：系统具有一个中央信息存储池，用来存储某种数据，它通常位于数据库中，你可以根据需要将它分发给某些人员或机器集群。信息存储池、用于分发信息的软件以及消息与软件所驻留的机器或机群被称为服务器; 第二章 一切都是对象1.用引用操作对象字符串可以用带引号的文本初始化 2.必须由你创建所有对象(1) 寄存器。这是最快的保存区域，因为它位于和其他所有保存方式不同的 地方：处理器内部。然而，寄存器的数量十分有限，所以寄存器是根据需要由编 译器分配。我们对此没有直接的控制权，也不可能在自己的程序里找到寄存器存 在的任何踪迹。(2) 堆栈。驻留于常规 RAM（随机访问存储器）区域，但可通过它的“堆栈 指针”获得处理的直接支持。堆栈指针若向下移，会创建新的内存；若向上移， 则会释放那些内存。这是一种特别快、特别有效的数据保存方式，仅次于寄存器。 创建程序时，Java 编译器必须准确地知道堆栈内保存的所有数据的“长度”以 及“存在时间”。这是由于它必须生成相应的代码，以便向上和向下移动指针。 这一限制无疑影响了程序的灵活性，所以尽管有些 Java 数据要保存在堆栈里— —特别是对象句柄，但 Java 对象并不放到其中。(3) 堆。一种常规用途的内存池（也在 RAM 区域），其中保存了 Java 对象。 和堆栈不同，“内存堆”或“堆”（Heap）最吸引人的地方在于编译器不必知道 要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长的时间。 因此，用堆保存数据时会得到更大的灵活性。要求创建一个对象时，只需用 new 命令编制相关的代码即可。执行这些代码时，会在堆里自动进行数据的保存。当 然，为达到这种灵活性，必然会付出一定的代价：在堆里分配存储空间时会花掉 更长的时间！(4) 静态存储。这儿的“静态”（Static）是指“位于固定位置”（尽管也在 RAM 里）。程序运行期间，静态存储的数据将随时等候调用。可用 static 关键字 指出一个对象的特定元素是静态的。但 Java 对象本身永远都不会置入静态存储 空间。(5) 常数存储。常数值通常直接置于程序代码内部。这样做是安全的，因为 它们永远都不会改变。有的常数需要严格地保护，所以可考虑将它们置入只读存 储器（ROM）。(6) 非 RAM 存储。若数据完全独立于一个程序之外，则程序不运行时仍可 存在，并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固 定对象”。对于流式对象，对象会变成字节流，通常会发给另一台机器。而对于 固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不 变。对于这些类型的数据存储，一个特别有用的技巧就是它们能存在于其他媒体 中。一旦需要，甚至能将它们恢复成普通的、基于 RAM 的对象。Java 1.1 提供 了对 Lightweight persistence 的支持。未来的版本甚至可能提供更完整的方案 特殊情况：主要类型 有一系列类需特别对待；可将它们想象成“基本”、“主要”或者“主” （Primitive）类型，进行程序设计时要频繁用到它们。之所以要特别对待，是由于用 new 创建对象（特别是小的、简单的变量）并不是非常有效，因为 new 将 对象置于“堆”里。所以对于这些主要类型，Java 采纳了与 C 和 C++相同的方法。也就 是说，不是用 new 创建变量，而是创建一个并非句柄的“自动”变量。这个变 量容纳了具体的值，并置于堆栈中，能够更高效地存取。 Java 决定了每种主要类型的大小。就象在大多数语言里那样，这些大小并 不随着机器结构的变化而变化。这种大小的不可更改正是 Java 程序具有很强移 植能力的原因之一。 3.特例:基本类型主类型 大小 最小值 最大值 封装器类型boolean 1 位 - - Booleanchar 16 位 Unicode 0 Unicode 2的16次方-1 Characterbyte 8 位 -128 +127 Byteshort 16 位 -2的15次方 +2的 15 次方-1 Shortint 32 位 -2的31次方 +2的 31 次方-1 Integerlong 64 位 -2的63次方 +2的 63 次方-1 Longfloat 32 位 IEEE754 IEEE754 Floatdouble 64 位 IEEE754 IEEE754 Doublefloat有一个符号位+8个指数位+23个尾数位 阶码的范围是-126～127 -126-23 即最小值为2的-149次方 最大值(2-2的-23次方)2的127次方Float.MIN_VALUE = 1.4e-45fFloat.MAX_VALUE = 3.4028235e+38fdouble一样 1+11+52 解码的范围 -1022-1023 -1022-52 即最小值为2的-1074次方 最大值(2-2的-52)2的1023次方为什么java中对于float和double定义的最小值都是正数，而不是-Float.MAX_VALUE了？因为他们不是连续的，它们有精度，无法表示整个实数，最小值也是趋近于零，float无法表示-Float.MIN_VALUE和Float.MIN_VALUE之间的值，如果最小值用-Float.MAX_VALUE是不严谨的 高精度数字Java 1.1 增加了两个类，用于进行高精度的计算：BigInteger 和 BigDecimal。 尽管它们大致可以划分为“封装器”类型，但两者都没有对应的“主类型”。 这两个类都有自己特殊的“方法”，对应于我们针对主类型执行的操作。也 就是说，能对 int 或 float 做的事情，对 BigInteger 和 BigDecimal 一样可以做。 只是必须使用方法调用，不能使用运算符。此外，由于牵涉更多，所以运算速度 会慢一些。我们牺牲了速度，但换来了精度。BigInteger 支持任意精度的整数。也就是说，我们可精确表示任意大小的整 数值，同时在运算过程中不会丢失任何信息。BigDecimal 支持任意精度的定点数字。例如，可用它进行精确的币值计算。至于调用这两个类时可选用的构建器和方法，请自行参考联机帮助文档 4.Java 的数组在 C++里，应尽量不要使用数组，换用标准模板库（Standard TemplateLibrary）里更安全的容器。而一个 Java 可以保证被初始化，而且不可在它的范 围之外访问。由于系统自动进行范围检查，所以必然要付出一些代价：针对每个 数组，以及在运行期间对索引的校验，都会造成少量的内存开销。但由此换回的 是更高的安全性，以及更高的工作效率。为此付出少许代价是值得的。创建对象数组时，实际创建的是一个句柄数组。而且每个句柄都会自动初始 化成一个特殊值，并带有自己的关键字：null（空）。一旦 Java 看到 null，就知 道该句柄并未指向一个对象。正式使用前，必须为每个句柄都分配一个对象。若 试图使用依然为 null 的一个句柄，就会在运行期报告问题。因此，典型的数组错 误在 Java 里就得到了避免。 也可以创建主类型数组。同样地，编译器能够担保对它的初始化，因为会将 那个数组的内存划分成零。 5.作用域对于在作用域里 定义的名字，作用域同时决定了它的“可见性”以及“存在时间”。在 C，C++ 和 Java 里，作用域是由花括号的位置决定的12345678910 &#123; int x = 12; /* only x available */ &#123; int q = 96; /* both x &amp; q available */ &#125; /* only x available */ /* q “out of scope” */&#125; 注意尽管在 C 和 C++里是合法的，但在 Java 里不能象下面这样书写代码：1234567 &#123; int x = 12; &#123; int x = 96; /* illegal */ &#125;&#125; 编译器会认为变量 x 已被定义。所以 C 和 C++能将一个变量“隐藏”在一 个更大的作用域里。但这种做法在 Java 里是不允许的，因为 Java 的设计者认 为这样做使程序产生了混淆。 对象的作用域Java 对象不具备与主类型一样的存在时间。用 new 关键字创建一个 Java 对象的时候，它会超出作用域的范围之外123&#123;String s = new String(&quot;a string&quot;);&#125; /* 作用域的终点 */ 那么句柄 s 会在作用域的终点处消失。然而，s 指向的 String 对象依然占据 着内存空间。在上面这段代码里，我们没有办法访问对象，因为指向它的唯一一 个句柄已超出了作用域的边界。在后面的章节里，大家还会继续学习如何在程序 运行期间传递和复制对象句柄。 6.新建数据类型：类定义一个类时（我们在 Java 里的全部工作就是定义类、制作那些类的对象 以及将消息发给那些对象），可在自己的类里设置两种类型的元素：数据成员（有 时也叫“字段”）以及成员函数（通常叫“方法”）。其中，数据成员是一种对象 （通过它的句柄与其通信），可以为任何类型。它也可以是主类型（并不是句柄） 之一 7.主成员的默认值若某个主数据类型属于一个类成员，那么即使不明确（显式）进行初始化， 也可以保证它们获得一个默认值。主类型 默认值Boolean falseChar ‘\u0000’(null)byte (byte)0short (short)0int 0long 0Lfloat 0.0fdouble 0.0d一旦将变量作为类成员使用，就要特别注意由 Java 分配的默认值。这样做 可保证主类型的成员变量肯定得到了初始化（C++不具备这一功能），可有效遏 止多种相关的编程错误。 然而，这种保证却并不适用于“局部”变量——那些变量并非一个类的字段。所以，假若在一个函数定义中写入下述代码：int x;那么 x 会得到一些随机值（这与 C 和 C++是一样的），不会自动初始化成零。 我们责任是在正式使用 x 前分配一个适当的值。如果忘记，就会得到一条编译期 错误，告诉我们变量可能尚未初始化。这种处理正是 Java 优于 C++的表现之一。 许多 C++编译器会对变量未初始化发出警告，但在 Java 里却是错误。 8: 方法、自变量和返回值迄今为止，我们一直用“函数”（Function）这个词指代一个已命名的子例程。 但在 Java 里，更常用的一个词却是“方法”（Method），代表“完成某事的途径”。 尽管它们表达的实际是同一个意思，但从现在开始，本书将一直使用“方法”， 而不是“函数”。Java 的“方法”决定了一个对象能够接收的消息。Java 的方法只能作为类的一部分创建。只能针对某个对象调用一个方法(正如马上就要学到的那样，“静态”方法可针对类调用，毋需一个对象)int x = a.f();象这样调用一个方法的行动通常叫作“向对象发送一条消息”。在上面的例 子中，消息是 f()，而对象是 a。面向对象的程序设计通常简单地归纳为“向对象 发送消息”。正如在 Java 其他地方处理对象时一样，我们实际传递的是“句柄”（注释④）。④：对于前面提及的“特殊”数据类型 boolean，char，byte，short，int， long，，float 以及 double 来说是一个例外。但在传递对象时，通常都是指传递指 向对象的句柄。 9：使用其他组件用 import 关键字准确告诉 Java 编译器我们希望的类是什么。import 的作用是 指示编译器导入一个“包”——或者说一个“类库”（在其他语言里，可将“库” 想象成一系列函数、数据以及类的集合。但请记住，Java 的所有代码都必须写 入一个类中）。1import java.util.Vector; 它的作用是告诉编译器我们想使用 Java 的 Vector 类。然而，util 包含了数 量众多的类，我们有时希望使用其中的几个，同时不想全部明确地声明它们。为 达到这个目的，可使用“*”通配符。如下所示：123456789101112131415161718192021222324252627282930313233343536373839import java.util.*;``` 需导入一系列类时，采用的通常是这个办法。应尽量避免一个一个地导入类#### 10:static 关键字通常，我们创建类时会指出那个类的对象的外观与行为。除非用 new 创建那 个类的一个对象，否则实际上并未得到任何东西。只有执行了 new 后，才会正 式生成数据存储空间，并可使用相应的方法。但在两种特殊的情形下，上述方法并不堪用。一种情形是只想用一个存储区 域来保存一个特定的数据——无论要创建多少个对象，甚至根本不创建对象。另 一种情形是我们需要一个特殊的方法，它没有与这个类的任何对象关联。也就是 说，即使没有创建对象，也需要一个能调用的方法。为满足这两方面的要求，可 使用 static（静态）关键字。一旦将什么东西设为 static，数据或方法就不会同 那个类的任何对象实例联系到一起当然，在正式使用前，由于static 方法不需要创建任何对象，所以它们不可简单地调用其他那些成员，同时不引用 一个已命名的对象，从而直接访问非 static 成员或方法（因为非 static 成员和方 法必须同一个特定的对象关联到一起）。&lt;font color=&quot;#eb4d4b&quot;&gt;尽管是“静态”的，但只要应用于一个数据成员，就会明确改变数据的创建 方式（一个类一个成员，以及每个对象一个非静态成员）。若应用于一个方法， 就没有那么戏剧化了。对方法来说，static 一项重要的用途就是帮助我们在不必 创建对象的前提下调用那个方法。正如以后会看到的那样，这一点是至关重要的 ——特别是在定义程序运行入口方法 main()的时候。 和其他任何方法一样，static 方法也能创建自己类型的命名对象。所以经常 把 static 方法作为一个“领头羊”使用，用它生成一系列自己类型的“实例”。&lt;/font&gt;## 第三章 操作符#### 1.使用Java操作符几乎所有Java操作符都只能操作“基本类型”，例外的是“=”，“==”和“!=”String类型支持“+”和“+=”#### 2.赋值对象的赋值其实是将“引用”赋值到另一个地方。如 c = d;那么c和d都指向原本只有d指向的对象。下面这个小例子挺好的t2赋给t1后，并非是互相独立桥归桥路归路。而是绑定在一起共同操作同一个对象。这种特殊的现象称为“别名现象”。#### 3.算术操作符整数除法后直接去掉小数位，而非四舍五入的结果。Random类对象#### 4.关系操作符==和!= 比较的是对象的引用。```javapublic class Equivalence &#123;public static void main(String[] args) &#123;Integer n1 = new Integer(47);Integer n2 = new Integer(47);System.out.println(n1 == n2);System.out.println(n1 != n2);&#125;&#125; /* Output:falsetrue 需要比较对象的实际内容使用equals()，此方法不适合基本类型。然而，对于自定义类，需要比较对象的内容时，还需要覆盖equals()方法 5.逻辑操作符与&amp;&amp;，或||，非！在使用逻辑操作符时，会遇到短路现象，即boolean a =（2&gt;1）&amp;&amp; (3&lt;1) &amp;&amp; (5&gt;2) &amp;&amp; (9&gt;3);在计算到(3&gt;1)为false时，后续两个式子就不再计算，结果a = false不会再改变 5.直接常量直接常量后缀表明了它的类型，大写（或小写）L，表示long，大写（或小写）F，表示float，大写D，表示double如：long n3 = 200;float f4 = 1r-43f;十六进制 0x(0X) + 0~f八进制 0+0~7将变量初始化的超出表示范围，编译器会报错。通过使用Integer和Long的toBinaryString()方法，可以轻松又随意的以二进制形式表示。Java的指数计数法中，e表示10的幂次而非自然数2,.71那个e：float = 1.39e-43f;表示1.39*10^(-43) 6.直接常量与&amp;，或|，非~，异或^&amp;=，!=，^=。然而并没有~=，因为~是一元操作符。对于布尔值，按位操作符具有与逻辑操作符相同效果，但是它们不会中途短路。 7.移位操作符左移位操作符（&lt;&lt;），低位补0。“有符号”右移位操作符（&gt;&gt;），高位补0，符号保留。“无符号”右移位操作符（&gt;&gt;&gt;），无论正负，高位补0。char，byte，short移位前会被转换为int类型，得到结果也是int类型，只有右端低5位有效。（int类型只有32位）。因此无符号右移时，它们会被先转成Int型，然后右移操作，然后截断，赋值给原来的类型，在这种情况下可能导致-1的结果。 8.类型转换操作符可以对变量或者数值进行类型转换（cast）。如果执行窄化转换，数据可能会丢失，编译器会觉得是不是我们搞错了没注意到，此时需要显式的进行类型转换，强调一下。执行扩展转换，则不必显式的进行类型转换。float和double转化为整型值时，总会对该数字执行截尾。对于基本数据类型进行算术运算或按位运算，只要类型比int小，在运算前这些书会自动转换成int，即会自动执行数据类型提升。表达式中出现最大的数据类型决定了表达式最终的数据类型。 参考资料https://my.oschina.net/jackieyeah/blog/224265 UML类图中的六大关系：关联、聚合、组合、依赖、继承、实现 JackieYeahhttps://www.cnblogs.com/yanquan/p/7248933.html 《THINKING IN JAVA》–第二章一切都是对象 延泉https://blog.csdn.net/severusyue/article/details/48576589 Java编程思想第四版读书笔记——第三章 操作符 severusyue]]></content>
      <categories>
        <category>书籍</category>
        <category>java</category>
        <category>java编程思想第四版</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>书籍</tag>
        <tag>java编程思想第四版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回溯与递归]]></title>
    <url>%2F2019%2F01%2F07%2F%E5%9B%9E%E6%BA%AF%E4%B8%8E%E9%80%92%E5%BD%92%2F</url>
    <content type="text"><![CDATA[前言最近在leetcode刷题，对于平常不是很清楚的一些数据结构和算法重新回顾和巩固一遍 目的了解回溯和递归的区别，另外弄清楚回溯的特点和应用场景 正文回溯和递归的区别和联系12递归:递归是一种算法结构,函数调用本身,最直接的递归应用就是计算连续数的阶乘，计算规律：n!=(n-1)!*n，还有汉诺塔的实现回溯:在按某种搜索策略搜索的过程中，当到达某一状态时，继续向前搜索已经确定不会得到正确答案的情况下，可以返回上一搜索状态，沿着新的可能性继续搜索。其求解过程的实质是一个先序遍历一棵“状态树”的过程 两者之间的联系:回溯多用递归实现 回溯的特点123搜索策略:符合递归算法，问题解决可以化为子问题，算法类似，规模减小;控制策略:当遇到失败的搜索状态，需要返回上一状态，沿另外的路径搜索;数据结构:一般用数组保存搜索过程中的状态、路径。 选择回溯的前提123选择：对于每个特定的解，肯定是由一步步构建而来的，而每一步怎么构建，肯定都是有限个选择，要怎么选择，这个要知道；同时，在编程时候要定下，优先或合法的每一步选择的顺序，一般是通过多个if或者for循环来排列条件：对于每个特定的解的某一步，他必然要符合某个解要求符合的条件，如果不符合条件，就要回溯，其实回溯也就是递归调用的返回结束：当到达一个特定结束条件时候，就认为这个一步步构建的解是符合要求的解了。把解存下来或者打印出来。对于这一步来说，有时候也可以另外写一个issolution函数来进行判断。注意，当到达第三步后，有时候还需要构建一个数据结构，把符合要求的解存起来，便于当得到所有解后，把解空间输出来。这个数据结构必须是全局的，作为参数之一传递给递归函数 回溯参数的设计1234必须要有一个临时变量(可以就直接传递一个字面量或者常量进去)传递不完整的解，因为每一步选择后，暂时还没构成完整的解，这个时候这个选择的不完整解，也要想办法传递给递归函数。也就是，把每次递归的不同情况传递给递归调用的函数。可以有一个全局变量，用来存储完整的每个解，一般是个集合容器（也不一定要有这样一个变量，因为每次符合结束条件，不完整解就是完整解了，直接打印即可）。最重要的一点，一定要在参数设计中，可以得到结束条件。一个选择是可以传递一个量n，也许是数组的长度，也许是数量，等等。要保证递归函数返回后，状态可以恢复到递归前，以此达到真正回溯。 扩展#784 LetterCasePermutation1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.creambing.leetcode.backtracking;import java.util.LinkedList;import java.util.List;/** * Class Name:LetterCasePermutation784 * Description:字母大小写全排列 * * @author Bing * @create 2019-01-07 20:52 * @version v1.0 */public class LetterCasePermutation784 &#123; public List&lt;String&gt; letterCasePermutation(String S) &#123; //全局的结果集合，作为回溯入参，保存完整结果 List&lt;String&gt; result = new LinkedList&lt;&gt;(); //开始回溯，这里选用字符数组，方便遍历以及替换字符，同时还可以连接成完整结果 backtracking(S.toCharArray(), 0, result); return result; &#125; private void backtracking(char[] s, int pos, List&lt;String&gt; result) &#123; result.add(new String(s)); for (int j = pos; j &lt; s.length; j++) &#123; char ch = s[j]; if (Character.isAlphabetic(ch)) &#123; s[j] = flip(ch); backtracking(s, j+1, result); s[j]= ch; &#125; &#125; &#125; private char flip(char ch)&#123; return Character.isUpperCase(ch)? Character.toLowerCase(ch):Character.toUpperCase(ch); &#125; public static void main(String[] args) &#123; String s ="ab14c"; new LetterCasePermutation784().letterCasePermutation(s).forEach(System.out::println); &#125;&#125; 思路根据上面的对于回溯的理解设计参数，我们从最简单的情景来设计程序，假设串是a,那么结果就是a,A,那么这个最简单的逻辑是什么了？先把当前串写入集合中，把第i个字母大小转换(数字不管)就是下面这段,要注意的是:要保证递归函数返回后，状态可以恢复到递归前，以此达到真正回溯,因此注释的那段很重要，要加上，否则回溯会有问题1234567891011121314public class LetterCasePermutation784 &#123; private void backtracking(char[] s, int pos, List&lt;String&gt; result) &#123; result.add(new String(s)); for (int j = pos; j &lt; s.length; j++) &#123; char ch = s[j]; if (Character.isAlphabetic(ch)) &#123; s[j] = flip(ch); backtracking(s, j+1, result); //s[j]= ch; &#125; &#125; &#125;&#125; 运行结果截图运行流程分析Runtime: 10 ms, faster than 45.47% of Java online submissions for Letter Case Permutation. #401 BinaryWatch(二进制手表) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.creambing.leetcode.backtracking;import java.util.ArrayList;import java.util.List;/** * Class Name:BinaryWatch401 * Description:二进制手表 * * @author Bing * @version v1.0 * @create 2019-01-08 19:00 */public class BinaryWatch401 &#123; public List&lt;String&gt; readBinaryWatch(int num) &#123; int[] hoursc = &#123;1, 2, 4, 8&#125;; int[] minutec = &#123;1, 2, 4, 8, 16, 32&#125;; List&lt;String&gt; result = new ArrayList&lt;&gt;(); //我们想给了n个灯亮，那么我们正常就是先在hour中选，然后在minute中选，差不多想到下面这种逻辑 List&lt;Integer&gt; hourList = new ArrayList&lt;&gt;(); List&lt;Integer&gt; minuteList = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; num; i++) &#123; //这里面关于最后一个回溯参数先前没有考虑，getHour中i=0开始遍历的，这里设置参数的原因是选过了就不能再选了 getHour(i, hourList, 0, hoursc, 0); getMinu(num - i, minuteList, 0, minutec, 0); for (int hour : hourList) &#123; for (int minu : minuteList) &#123; result.add(hour+":"+(minu&lt;10?"0"+minu:minu)); &#125; &#125; //这里一定要清空 hourList.clear(); minuteList.clear(); &#125; return result; &#125; private void getHour(int n, List&lt;Integer&gt; hourList, int hour, int[] hoursc, int index) &#123; //这段可以不加，但是为了效率，加上 if (n &lt; 0) &#123; return; &#125; if (n == 0 &amp;&amp; hour &lt; 12) &#123; hourList.add(hour); &#125; for (int i = index; i &lt; hoursc.length; i++) &#123; getHour(n - 1, hourList, hour + hoursc[i], hoursc, i + 1); &#125; &#125; private void getMinu(int n, List&lt;Integer&gt; minuList, int minu, int[] minuc, int index) &#123; if (n &lt; 0) &#123; return; &#125; if (n == 0 &amp;&amp; minu &lt; 60) &#123; minuList.add(minu); &#125; for (int i = index; i &lt; minuc.length; i++) &#123; getMinu(n - 1, minuList, minu + minuc[i], minuc, i + 1); &#125; &#125;&#125; 这里拿到题目之后，感觉可以用回溯发，开始设计回溯参数 1.最开始的时候没有设计最后一个参数，for循环中i=0而不是index,这样导致选了之后在选，重复了，这里我们没有恢复状态，因为我们也没有改变状态，我们只是遍历取合适的值 2.另外一个小问题是组合的时候需要清空列表Runtime: 3 ms, faster than 56.44% of Java online submissions for Binary Watch. 其他需要回溯方法解决的leetcode题目:https://leetcode.com/tag/backtracking/ 参考资料1.https://www.jianshu.com/p/4c5ccac18fac 递归2-回溯与递归 偏偏注定要落脚丶2.https://blog.csdn.net/u014772862/article/details/51789015 回溯和递归区别 繁拾简忆3.https://blog.csdn.net/sinat_27908213/article/details/80599460 回溯算法超通俗易懂详尽分析和例题 littlelufisher]]></content>
      <categories>
        <category>算法</category>
        <category>回溯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7在线安装docker]]></title>
    <url>%2F2018%2F11%2F30%2Fcentos7%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85docker%2F</url>
    <content type="text"><![CDATA[前言在线在centos7安装docker 目的CentOS Linux release 7.5.1804 (Core)docker-ce.x86_64 3:18.09.0-3.el7 正文1.确认系统是否是centos7，内核在3.10以上123uname -r或者cat /etc/redhat-release 2.执行如下命令安装在root用户下，或者在sudo执行123456789yum install -y yum-utils \ device-mapper-persistent-data \ lvm2yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce 在第一次执行安装命令时，无法解析远程仓库，此时用浏览器访问了一下,确认可以访问，于是再次执行，安装成功，这说明这个网站针对国内不够稳定，最后下载的时候确实显示速度也比较慢所以这里可以切换成阿里的源 http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo3.启动并验证12systemctl start docker.servicedocker run hello-world 参考资料1.docker官方网站[https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository]]]></content>
      <categories>
        <category>centos7</category>
        <category>docker</category>
        <category>在线</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>docker</tag>
        <tag>在线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker安装mangodb和redis]]></title>
    <url>%2F2018%2F11%2F29%2Fdocker%E5%AE%89%E8%A3%85mangodb%E5%92%8Credis%2F</url>
    <content type="text"><![CDATA[前言在有docker环境和docker-compose的工具的机器上，快速搭建redis和mangodb的单机服务 目的由于我在window上安装了docker,具体教程可看windows上安装docker-ce，以下命令都是在windows上操作 正文安装redis在cmd中执行以下命令下载redis镜像1docker pull redis 在redis服务需要启动的目录中新建redis.yml文件，里面写入如下内容1234567891011121314151617181920version: '3.1'services: redis: image: redis:latest container_name: redis hostname: redis restart: always networks: static-network: ipv4_address: 172.21.0.2 ports: - "16379:6379"networks: static-network: ipam: config: - subnet: 172.21.0.0/16 注意我们这里对于redis所在容器的ip进行了指定，当然也可以不用指定，可以服务开启后自己查看ip地址，另外容器ip不用172.21.0.1,不然会报错地址已被使用进入redis.yml文件所在目录执行1docker-compose -f redis.yml up -d 截图如下利用redis-client客户端连接(客户端下载地址 https://redisdesktop.com/download)这里在window下有个问题，就是我这里重新又定义了一个网络，我发现我不能ping通172.21.0.2这个容器ip，所以只能通过127.0.0.1:16379连接不过之前定义的consuls的网络是可以ping通的,后来发现ping通的不是docker中的，而是电信网关连接的其他网络，我们现在将网络改为consuls桥接的网络看看123456789101112131415161718version: '3.1'services: redis: image: redis:latest container_name: redis hostname: redis restart: always networks: consuls_static-network: ipv4_address: 172.20.0.5 ports: - "16379:6379"networks: consuls_static-network: external: true 这里只是展示一下docker-compose使用已有网络的写法，虽然改了能够ping通，但不是这个网络，这个和linux上有差别 linux上docker新建桥接网络，是可以互通的，但是windows上不行我注意到docker 的setting中有network这个选项然后我们查看一下window的路由链路1route print 这里我们发现10.0.75.0/24的子网的网关为10.0.75.1和docker setting配置一样，正好对上了，但是并没有172.20.0.5的子网，虽然docker中已经有了，这也正说明windows上的docker和linux上的docker不一样，因为linux上只要新建了网络，就有链路了所以我们这里新建一个匹配的桥接网络1docker network create -d bridge --subnet=10.0.75.0/24 --gateway=10.0.75.1 usable_net 123456789101112131415161718192021222324version: '3.1'services: redis: image: redis:latest container_name: redis hostname: redis restart: always networks: usable_net: ipv4_address: 10.0.75.5 ports: - "16379:6379"networks: usable_net: external: true#或者如下networks: usable_net: ipam: config: - subnet: 10.0.75.0/24 结果我发现这样做之后redis都连接不上了，于是还原回去利用最开始的方法，自己自定义网络，但是我们发现我们自定义的网络中连网关都没有 扩展这部分是在Linux作为宿主机的测试，centos7在线安装docker + linux上安装docker-compose(centos7.5+docker18.09+docker-composev1.22.0)因为可以ping通，所以我在linux宿主机上既可以通过本地的16379也可以用docker的ip(172.21.0.2)+6379访问，但是在windows上我只能用16379,因为docker机器我无法ping通 这里遗留了两个问题:12windows上network配置有什么用？为什么windows作为宿主机无法ping通自定义桥接网络的容器ip? 但是我们还是无法ping通，我们手动添加路由试试1route add 192.172.0.0 mask 255.255.0.0 192.168.5.105 https://download.studio3t.com/studio-3t/windows/2018.5.1/studio-3t-x64.zip 参考资料1.docker-compose v3 [https://docs.docker.com/compose/compose-file/#ipv4_address-ipv6_address]2.docker-compose networks [https://docs.docker.com/compose/networking/#configure-the-default-network]]]></content>
      <categories>
        <category>docker-compose</category>
        <category>mangodb</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
        <tag>mangodb</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs微服务集成consul]]></title>
    <url>%2F2018%2F11%2F23%2Fnodejs%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90consul%2F</url>
    <content type="text"><![CDATA[前言使用Sidecar来整合非jvm微服务这篇文章讲解了非jvm集成到springcloud体系中的方法 需要说明的是上述方法是用Netflix的sidecar,然而它依赖Eureka作为服务发现组件，consul有自己的注册接口 目的利用consul的http api将nodejs微服务注册到consul中 正文js中有目前实现最为完备的Consul 客户端是node-consul它支持的功能有123456789ACL: 访问控制Agent: 检查/服务注册Health: 健康信息获取Catalog: 目录列表KV: 键值对存取Event: 发送事件与列表Query: 查询服务信息Status: Raft一致性的状态信息... 不过我目前就只需要当node程序启动时能将服务注册到consul中，关闭程序时能注销我发现Consul-SDK实现了这一点使用方法在nodejs工程目录下运行命令安装,当时安装的版本为1.1.9，其中依赖的consul(即node-consul)版本为0.27.0，当前最新为0.34.11npm i consul-sdk --save 在根目录下添加consul.json，check是我后面添加健康检查自己修改源码所加的配置123456789101112&#123; "serverHost": "localhost", "serverPort": 18500, "secure": false, "name": "node-service", "host": "192.168.5.105", "port": 3000, "check":&#123; "http":"http://192.168.5.105:3000/health", "interval":"10s" &#125;&#125; 在app.js中引入consul-sdk1require('consul-sdk'); 这样在项目启动和结束就会触发相应的注册和注销操作由于我现在的consul服务器端版本是1.3.0，这个js版本的consul客户端版本是0.27.0，其中注销时报错405，get方法不被允许需要修改consul源码包中service.js中注销逻辑中get方法为put方法，和注册一样我们对比一下js版本的consul客户端和java版本的客户端(spring-cloud-starter-consul-discovery),在服务发现的功能上12js实现了服务注册和注销，但是还没有健康检查，如果注销失败会出现下面截图中出现的事情，服务在consul上依然存在并且正常java实现了服务注册和健康检查，并没有服务注销(不知道是不是我没有配置) 其实node-consul是支持健康检查的，只不过consul-sdk不支持，但它是依赖node-consul来做的，我们把consul-sdk源码修改一下其实consul-sdk是对consul的一层封装，作者用es5写的，可以借鉴思路自己改写同时配置文件添加上面那一段check.下面我们在我们之前实现的网关服务中springcloud使用zuul聚合微服务添加代码来调用一下node中的相关服务添加服务类和控制类1234567891011121314151617181920212223242526272829303132333435363738@Servicepublic class NodeRibbonService &#123; @Autowired RestTemplate restTemplate; @HystrixCommand(fallbackMethod = "fallback") public String getHealthInfo() &#123; return restTemplate.getForObject("http://node-service/health", String.class); &#125; public String fallback(Throwable throwable) &#123; System.out.println("node-service /health 报错:"+throwable); Map&lt;String, Object&gt; map = Maps.newHashMap(); map.put("status", "unkown"); return new Gson().toJson(map); &#125;&#125;@RestController@RequestMapping("/un")public class UserAndNodeController &#123; @Autowired UserRibbonService userRibbonService; @Autowired NodeRibbonService nodeRibbonService; @RequestMapping(value = "/getUserAndNodeHealth",method = RequestMethod.GET) public Map&lt;String, Object&gt; getUserAndNodeHealth()&#123; List&lt;User&gt; users = userRibbonService.getAllUsers1(); String s = nodeRibbonService.getHealthInfo(); Map&lt;String, Object&gt; map = Maps.newHashMap(); map.put("users",users); map.put("node",s); return map; &#125;&#125; 调用接口http://localhost:1051/un/getUserAndNodeHealth关掉node服务，但是没有在consul上注销并且consul上显示node服务正常利用上面修改源码程序退出成功在consul上注销后再调用关掉node程序，增加健康检查后，但是在consul上不注销，此时consul上显示node服务不健康，调用该接口直接走hytrix,和java类似 参考资料1.js版本的consul客户端 [https://github.com/silas/node-consul#agent-service-register]2.Consul-SDK博客地址 [http://www.moye.me/2016/10/26/node-consul-sdk/]3.consul-sdkgithub地址 [https://github.com/rockdragon/node-consul-sdk]4.consul官网service的http api [https://www.consul.io/api/agent/service.html]]]></content>
      <categories>
        <category>nodejs</category>
        <category>consul</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Sidecar来整合非jvm微服务]]></title>
    <url>%2F2018%2F11%2F21%2F%E4%BD%BF%E7%94%A8Sidecar%E6%9D%A5%E6%95%B4%E5%90%88%E9%9D%9Ejvm%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言由于语言多样，系统复杂，有时候一个健壮的系统可能是由多种语言组成的，针对一个非jvm的接口平台，我们可以利用sidecar整合进来 目的利用zuul可以调用已经注册到注册中心的服务，利用sidecar调用非jvm的服务，这样就可以对外提供一个整合了jvm和非jvm的网关服务 正文利用idea新建一个node项目在idea中新建一个node工程，没有的话，先添加nodejs插件 编写node项目，添加health端点在app.js中添加123var healthRouter = require('./routes/health');app.use('/health', healthRouter); 在routes中添加health.js中添加如下123456789var express = require('express');var router = express.Router();/* GET users listing. */router.get('/', function(req, res, next) &#123; res.send(JSON.stringify(&#123;"status":"UP"&#125;));&#125;);module.exports = router; 访问http://localhost:3000/health显示 编写java sidecar整合这个node服务参考资料]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>sidecar</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>sidecar</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud使用zuul聚合微服务]]></title>
    <url>%2F2018%2F10%2F30%2Fspringcloud%E4%BD%BF%E7%94%A8zuul%E8%81%9A%E5%90%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言1.springcloud编写用户微服务2.springcloud编写电影微服务3.springcloud集成网关ZUUL依上面教程，我已经实现了用户，电影微服务以及zuul网关，微服务的设计难点之一在于对原有业务的拆分，在我看来每个微服务职责要尽可能单一，但是这样同样也带来了一个问题，那就是微服务之间不可避免的一些交集.例如终端需要查询用户信息和电影信息，这里有两种做法1.让终端查询用户信息后在查询电影信息2.网关层查询用户信息和电影信息，聚合后返回给终端后一种方式显然更好一些，因为他节省了带宽，相较于终端两次请求网关，显然网关两次请求微服务的网络情况更好 目的利用RXJAVA聚合微服务，这里面其实很多东西可以讨论，关于分布式协议和分布式事务,这次先简单的说明一下查询聚合，因为查询是幂等操作，不需要事务 正文工程初始化可以参见这篇博客springcloud集成网关ZUUL验证:http://localhost:1051/api/user/user/getAllhttp://localhost:1051/api/movie/movie/findOneById?id=2 集成feign,添加用户和电影的消费端可以参见这篇博客springcloud集成feign仿照user创建movie的feign客户端1234567891011121314@FeignClient(name = &quot;consul-movie&quot;)public interface MovieFeignClient &#123; @RequestMapping(value = &quot;/movie/findOneById&quot;,method = RequestMethod.GET) Movie findOneById(@RequestParam(&quot;id&quot;) Long id);&#125;错误的写法@FeignClient(name = &quot;consul-movie&quot;)public interface MovieFeignClient &#123; @RequestMapping(value = &quot;/movie/findOneById&quot;,method = RequestMethod.GET) Movie findOneById(Long id);&#125; get多参数写法12直接写Long id或者直接是User user这种对象，feign依然会用post方式调用，所以会报错接口不支持需要用@RequestParam(&quot;id&quot;)注解，或者@RequestParam Map&lt;String,Object&gt; map 扩展 20181031更新:zuul上的service中添加hystrix回退并没有执行，如下图，想着service中利用的是feign实现的，所以给feign加上回退，需要在配置上加上feign.hystrix.enabled=true123456789101112131415161718192021222324252627282930313233343536373839404142@FeignClient(name = "consul-movie",fallback = MovieFeignClient.MovieFeignClientFallBack.class)public interface MovieFeignClient &#123; @RequestMapping(value = "/movie/findOneById",method = RequestMethod.GET) Movie findOneById(@RequestParam("id") Long id); @Component class MovieFeignClientFallBack implements MovieFeignClient&#123; @Override public Movie findOneById(Long id) &#123; Movie movie = new Movie(); movie.setId(-1L); return movie; &#125; &#125;&#125;//加上日志的版本@FeignClient(name = "consul-movie",fallbackFactory = MovieFeignClient.MovieFeignClientFallBackFactory.class)public interface MovieFeignClient &#123; @RequestMapping(value = "/movie/findOneById",method = RequestMethod.GET) Movie findOneById(@RequestParam("id") Long id); @Component class MovieFeignClientFallBackFactory implements FallbackFactory&lt;MovieFeignClient&gt;&#123; private static final Logger LOGGER = LoggerFactory.getLogger(MovieFeignClientFallBackFactory.class); @Override public MovieFeignClient create(Throwable throwable) &#123; return new MovieFeignClient() &#123; @Override public Movie findOneById(Long id) &#123; LOGGER.error("MovieFeignClient findOneById fallback;reason was:[&#123;&#125;]",throwable); Movie movie = new Movie(); movie.setId(-1L); return movie; &#125; &#125;; &#125; &#125;&#125; 集成ribbon添加一个配置类java123456789@Componentpublic class RibbonConf &#123; @Bean @LoadBalanced public RestTemplate restTemplate()&#123; return new RestTemplate(); &#125;&#125; 添加ribbon调用服务类123456789101112131415161718192021222324252627282930313233343536@Servicepublic class MovieRibbonService &#123; @Autowired private RestTemplate restTemplate; @HystrixCommand(fallbackMethod = "fallback") public Observable&lt;Movie&gt; findOneById(Long id) &#123; return Observable.create(observer -&gt; &#123; Movie movie = restTemplate.getForObject("http://consul-movie/movie/findOneById", Movie.class, id); observer.onNext(movie); observer.onComplete(); &#125;); &#125; public Observable&lt;Movie&gt; fallback(Long id) &#123; return Observable.create(observer -&gt; &#123; Movie movie = new Movie(); movie.setId(-1L); observer.onNext(movie); observer.onComplete(); &#125;); &#125; @HystrixCommand(fallbackMethod = "fallback1") public Movie findOneById1(Long id) &#123; return restTemplate.getForObject("http://consul-movie/movie/findOneById", Movie.class, id); &#125; public Movie fallback1(Long id,Throwable throwable) &#123; System.out.println("consul-movie /movie/findOneById 报错:"+throwable); Movie movie = new Movie(); movie.setId(-1L); return movie; &#125;&#125; 新建聚合controller和服务(RXjava)针对feign实现的service,之前在上面截图中可以发现我在上面加了HystrixCommand没有用，所以去掉了，不知道是不是因为里面是feign实现的，所以下面会有ribbon实现123456789101112131415161718192021222324252627282930313233343536/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.springcloud.consulzuulum.service.rxjava;import com.springcloud.consulzuulum.feign.movie.Movie;import com.springcloud.consulzuulum.feign.movie.MovieFeignClient;import io.reactivex.Observable;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;/** * Class Name:MovieService * Description:movie rxjava 服务类 * * @author Bing * @version v1.0 * @create 2018-10-30 22:01 */@Servicepublic class MovieService &#123; @Autowired MovieFeignClient movieFeignClient; public Observable&lt;Movie&gt; findOneById(Long id) &#123; return Observable.create(observer -&gt; &#123; Movie movie = movieFeignClient.findOneById(id); observer.onNext(movie); observer.onComplete(); &#125;); &#125;&#125; 控制类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117/** * creambing.com Inc. * Copyright (c) 2016-2017 All Rights Reserved. */package com.springcloud.consulzuulum.controller;import com.google.common.collect.Maps;import com.springcloud.consulzuulum.feign.movie.Movie;import com.springcloud.consulzuulum.feign.movie.MovieFeignClient;import com.springcloud.consulzuulum.feign.user.User;import com.springcloud.consulzuulum.feign.user.UserFeignClient;import com.springcloud.consulzuulum.service.rxjava.MovieService;import com.springcloud.consulzuulum.service.rxjava.UserService;import io.reactivex.Observable;import io.reactivex.Observer;import io.reactivex.disposables.Disposable;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.context.request.async.DeferredResult;import java.util.HashMap;import java.util.List;import java.util.Map;/** * Class Name:UserAndMovieController * Description:用户和电影聚合控制类 * * @author Bing * @version v1.0 * @create 2018-10-30 17:11 */@RestController@RequestMapping("/um")public class UserAndMovieController &#123; @Autowired UserFeignClient userFeignClient; @Autowired MovieFeignClient movieFeignClient; @Autowired UserService userService; @Autowired MovieService movieService; @RequestMapping(value = "/getUserAndMovie", method = RequestMethod.GET) Map&lt;String, Object&gt; getUserAndMovie(Long id) &#123; Long startTime = System.currentTimeMillis(); Map&lt;String, Object&gt; result = new HashMap&lt;&gt;(); //同步调用 List&lt;User&gt; users = userFeignClient.getAllUser(); Movie movie = movieFeignClient.findOneById(id); result.put("users", users); result.put("movie", movie); Long endTime = System.currentTimeMillis(); System.out.println("getUserAndMovie同步调用花费时间:"+(endTime-startTime)); return result; &#125; @RequestMapping(value = "/getUserAndMovieUseRx", method = RequestMethod.GET) DeferredResult&lt;HashMap&lt;String,Object&gt;&gt; getUserAndMovieUseRx(Long id) &#123; Long startTime = System.currentTimeMillis(); //rx异步调用 Observable&lt;HashMap&lt;String,Object&gt;&gt; observable = aggregateObservable(id); DeferredResult&lt;HashMap&lt;String,Object&gt;&gt; result = toDefer(observable); Long endTime = System.currentTimeMillis(); System.out.println("getUserAndMovieUseRx异步调用花费时间:"+(endTime-startTime)); return result; &#125; public Observable&lt;HashMap&lt;String,Object&gt;&gt; aggregateObservable(Long id)&#123; return Observable.zip( userService.getAllUsers(), movieService.findOneById(id), (users,movie) -&gt; &#123; HashMap&lt;String,Object&gt; map = Maps.newHashMap(); map.put("users",users); map.put("movie",movie); return map; &#125; ); &#125; public DeferredResult&lt;HashMap&lt;String,Object&gt;&gt; toDefer(Observable&lt;HashMap&lt;String,Object&gt;&gt; details)&#123; DeferredResult&lt;HashMap&lt;String, Object&gt;&gt; result = new DeferredResult&lt;&gt;(); details.subscribe(new Observer&lt;HashMap&lt;String, Object&gt;&gt;() &#123; @Override public void onSubscribe(Disposable disposable) &#123; System.out.println(""); &#125; @Override public void onNext(HashMap&lt;String, Object&gt; stringObjectHashMap) &#123; result.setResult(stringObjectHashMap); &#125; @Override public void onError(Throwable throwable) &#123; System.out.println("发生错误:"+throwable); &#125; @Override public void onComplete() &#123; System.out.println("完成"); &#125; &#125;); return result; &#125;&#125; 访问feign http://localhost:1051/um/getUserAndMovieUseRx?id=1 hystrix有效rxjava+ribbon http://localhost:1051/um/getUserAndMovieUseRibbon?id=1 hystrix无效ribbon http://localhost:1051/um/getAllUserRibbon hystrix有效ribbon http://localhost:1051/um/getUserAndMovieUseRibbon1?id=1 hystrix有效]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>zuul</category>
        <category>rxjava</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>zuul</tag>
        <tag>rxjava</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud编写电影微服务]]></title>
    <url>%2F2018%2F10%2F30%2Fspringcloud%E7%BC%96%E5%86%99%E7%94%B5%E5%BD%B1%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言1.springcloud Finchley.SR2版本2.springboot 版本2.0.6.RELEASE3.h24.jooq5.consul搭建一个电影微服务 目的利用idea快速搭建一个springcloud集成上述功能的微服务，可以查询电影 正文初始化工程方法跟springcloud编写用户微服务中前期准备工程一般，勾选下列依赖在resources文件夹下新增bootstrap.yml文件，写入以下内容123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1018spring: application: #项目名称 name: consul-movie cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-movie #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.150:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 初始化H2数据库这时候决定手动初始化datasource,同时集成第三方数据库连接池进来，详情springboot集成druid此时consul上的配置如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758spring: datasource: url: jdbc:h2:mem:test #url: jdbc:h2:file:~/.h2/testdb #url: jdbc:h2:~/testuser driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true h2: console: settings: web-allow-others: true #进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。 path: /h2-console #进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。 enabled: true #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。#Actuator的健康检查开启所有包括health，info，metrics等management: endpoints: web: exposure: include: &quot;*&quot; #开启health端点详细检查 endpoint: health: show-details: alwayslogging: level: root: INFO org.hibernate: INFO org.hibernate.type.descriptor.sql.BasicBinder: TRACE org.hibernate.type.descriptor.sql.BasicExtractor: TRACE 根据配置在resources目录下，新增db文件夹，下面新增schema.sql和data.sql文件，内容分别如下12345drop table movie if exists;create table movie (id bigint generated by default as identity ,movie_name varchar(40),score decimal(10,2),primary key (id));insert into movie (id,movie_name,score) values (1,&apos;肖申克的救赎&apos;,100.00);insert into movie (id,movie_name,score) values (2,&apos;这个杀手不太冷&apos;,101.00); 在pom中添加依赖druid12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; 在主程序平级目录新增db目录，新增DataSourceBean.java和DatasourceConf.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101@Configuration@Component@Datapublic class DataSourceBean &#123; private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceBean.class); @Autowired DatasourceConf datasourceConf; @Bean public DataSource getDataSource() &#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(datasourceConf.getUrl()); datasource.setUsername(datasourceConf.getUsername()); datasource.setPassword(datasourceConf.getPassword()); datasource.setDriverClassName(datasourceConf.getDriverClassName()); //configuration datasource.setInitialSize(datasourceConf.getInitialSize()); datasource.setMinIdle(datasourceConf.getMinIdle()); datasource.setMaxActive(datasourceConf.getMaxActive()); datasource.setMaxWait(datasourceConf.getMaxWait()); datasource.setTimeBetweenEvictionRunsMillis(datasourceConf.getTimeBetweenEvictionRunsMillis()); datasource.setMinEvictableIdleTimeMillis(datasourceConf.getMinEvictableIdleTimeMillis()); datasource.setValidationQuery(datasourceConf.getValidationQuery()); datasource.setTestWhileIdle(datasourceConf.getTestWhileIdle()); datasource.setTestOnBorrow(datasourceConf.getTestOnBorrow()); datasource.setTestOnReturn(datasourceConf.getTestOnReturn()); datasource.setPoolPreparedStatements(datasourceConf.getPoolPreparedStatements()); datasource.setMaxPoolPreparedStatementPerConnectionSize(datasourceConf.getMaxPoolPreparedStatementPerConnectionSize()); datasource.setUseGlobalDataSourceStat(datasourceConf.getUseGlobalDataSourceStat()); try &#123; datasource.setFilters(datasourceConf.getFilters()); &#125; catch (SQLException e) &#123; LOGGER.error(&quot;druid configuration initialization filter: &quot; + e); &#125; datasource.setConnectionProperties(datasourceConf.getConnectionProperties()); return datasource; &#125; /** * 配置监控服务器 * * @return 返回监控注册的servlet对象 */ @Bean public ServletRegistrationBean statViewServlet() &#123; ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;); // 添加IP白名单 servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;192.168.14.32,127.0.0.1&quot;); // 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高 servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.168.14.32&quot;); // 添加控制台管理用户 servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;druid&quot;); servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;); // 是否能够重置数据 servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;); return servletRegistrationBean; &#125; /** * 配置服务过滤器 * * @return 返回过滤器配置对象 */ @Bean public FilterRegistrationBean statFilter() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter()); // 添加过滤规则 filterRegistrationBean.addUrlPatterns(&quot;/*&quot;); // 忽略过滤格式 filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*,&quot;); return filterRegistrationBean; &#125;&#125;@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)@Component@Datapublic class DatasourceConf &#123; private String url; private String username; private String password; private String driverClassName; private int initialSize; private int minIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private Boolean testWhileIdle; private Boolean testOnBorrow; private Boolean testOnReturn; private Boolean poolPreparedStatements; private int maxPoolPreparedStatementPerConnectionSize; private String filters; private String connectionProperties; private Boolean useGlobalDataSourceStat;&#125; 重新启动主程序，此时会报一个小错，具体原因是由于druid开启了如下配置，当数据库为h2并且需要执行新增表操作时，sql统计分析会合并异常，具体看github上面的issue12# 配置监控统计拦截的filters，去掉后监控界面sql无法统计filters: stat 检查1.查看h2 ui,是否user表和数据是否写入 http://localhost:1016/h2-console/2.查看druid监控页面 http://127.0.0.1:1016/druid/sql.html 集成jooq generate工具具体教程可见springboot集成jooq 扩展 这里和user有一些不同的是，我将h2的数据库类型改成了内存，结果jooq-codegen-maven无法生成1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:mem:test&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; 需要改成文件类型1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:~/testmovie&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; 因为h2选择的是内存数据库，不管我是否将h2数据库开启(程序运行或不运行),然后执行jooq generate,都无法生成如果我将h2类型改为file,那么这个时候不能运行源程序，才能执行jooq generate，否则执行jooq generate的时候会报错数据库使用中 扩展在maven package时，由于集成了jooq generate工具，会执行一遍，这样如果自己修改了相关类会被还原，所以在打包时希望不执行相关驱动可以加如下配置 放在pom驱动配置的configuration标签内20181030更新:注意这个标签添加之后，无论编译打包甚至直接运行这个插件都不再生成相关东西，如果你现在需要重新运行一遍，请先提交或者保存你做过的修改，然后注释掉这个，运行完之后再加上，然后再将你做的修改重新添加回来12&lt;!-- install 跳过 --&gt;&lt;skip&gt;true&lt;/skip&gt;在打包的过程中，执行了springboot中的一些test，当从consul上远程读取yml配置时爆了如下错，忽略测试打包成功后，启动工程仍然报错，然而idea中自己run的时候却没有报错对比了相关命令远程yml配置中含有中文，务必在使用java -Dfile.encoding=UTF-8 -jar .\consul-movie-0.0.1-SNAPSHOT.jar指定utf8编码不然打包会失败，启动失败，会报上面的错https://github.com/jOOQ/jOOQ/blob/master/jOOQ-examples/jOOQ-spring-example/pom.xml]]></content>
      <categories>
        <category>java</category>
        <category>微服务</category>
        <category>springcloud</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jooq</tag>
        <tag>springcloud</tag>
        <tag>h2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud集成feign]]></title>
    <url>%2F2018%2F10%2F29%2Fspringcloud%E9%9B%86%E6%88%90feign%2F</url>
    <content type="text"><![CDATA[前言Feign是声明式、模板化的HTTP客户端，可以更加快捷优雅的调用HTTP API。在部分场景下和Ribbon类似，都是进行数据的请求处理，但是在请求参数使用实体类的时候显然更加方便，同时还支持安全性、授权控制等。Feign是集成了Ribbon的，也就是说如果引入了Feign，那么Ribbon的功能也能使用，比如修改负载均衡策略等。 目的1.springcloud Finchley.SR2版本2.springboot 版本2.0.6.RELEASE以consul为服务发现和配置中心的前提下，集成一个针对springcloud编写用户微服务的用户消费服务 正文初始化工程方法跟springcloud集成consul中前期准备工程一般，勾选下列依赖如果不是上述方法初始化，添加依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt; 在resources文件夹下新增bootstrap.yml文件，写入以下内容123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1020spring: application: #项目名称 name: consul-feign cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-feign #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.150:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 添加controller类和feign接口这里的user类就是springcloud编写用户微服务中jooq-codegen-maven3.10.8生成的实体对象所以最好是将这些实体模块化，这样在共同需要的地方引用即可，不用像我这样图简便就直接复制过来1234567891011121314151617181920@RestController@RequestMapping(&quot;/user&quot;)public class UserController &#123; @Autowired UserFeignClient userFeignClient; @RequestMapping(value = &quot;/getAll&quot;,method = RequestMethod.GET) public List&lt;User&gt; getAll()&#123; return userFeignClient.getAllUser(); &#125;&#125;@FeignClient(name = &quot;consul-user&quot;)public interface UserFeignClient &#123; @RequestMapping(value = &quot;/user/getAll&quot;,method = RequestMethod.GET) List&lt;User&gt; getAllUser();&#125; 20181030更新:get多参数写法 12直接写Long id或者直接是User user这种对象，feign依然会用post方式调用，所以会报错接口不支持需要用@RequestParam(&quot;id&quot;) Long id，或者@RequestParam Map&lt;String,Object&gt; map 最终的工程结构 修改主类主类上添加@EnableFeignClients注解，否则报错找不到UserFeignClient 集成健康检查和hystrix添加依赖1234567891011121314健康检查需加依赖&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;hystrix需加&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; 远程配置添加健康检查详细监控以及支持hystrix12345678910111213#Actuator的健康检查开启所有包括health，info，metrics等management: endpoints: web: exposure: include: &quot;*&quot; #开启health端点详细检查 endpoint: health: show-details: alwaysfeign: hystrix: enabled: true 修改主类 主类上添加@EnableHystrix注解，否则没有/actuator/hystrix.stream信息，另外上面的配置需要打开，不然没数据]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>feign</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>feign</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud集成网关ZUUL]]></title>
    <url>%2F2018%2F10%2F29%2Fspringcloud%E9%9B%86%E6%88%90%E7%BD%91%E5%85%B3ZUUL%2F</url>
    <content type="text"><![CDATA[前言Routing in an integral part of a microservice architecture. For example, / may be mapped to your web application, /api/users is mapped to the user service and /api/shop is mapped to the shop service. Zuul is a JVM based router and server side load balancer by Netflix.路由在微服务架构的一个组成部分。 例如，/可以映射到您的Web应用程序，/api/users映射到用户服务，并且/api/shop映射到商店服务。 Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器。其功能包括12345678910验证见解压力测试金丝雀测试动态路由服务迁移减载安全静态响应处理主动/主动流量管理 Zuul的规则引擎允许规则和过滤器基本上用任何JVM语言编写，内置支持Java和Groovy 目的1.springcloud Finchley.SR2版本2.springboot 版本2.0.6.RELEASE以consul为服务发现和配置中心的前提下，集成一个zuul网关服务 正文初始化工程方法跟springcloud集成consul中前期准备工程一般，勾选下列依赖 20181029更新:上面不用勾选hystrix,下面也说明了zuul中已经集成了在resources文件夹下新增bootstrap.yml文件，写入以下内容123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1050spring: application: #项目名称 name: consul-zuul cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-zuul #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.150:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 在远程配置中心上添加如下配置123456789101112131415zuul: routes: user: # 可以随便写，在zuul上面唯一即可；当这里的值 = service-id时，service-id可以不写。 path: /api/user/** # 想要映射到的路径 service-id: consul-user # consul中的service-name#Actuator的健康检查开启所有包括health，info，metrics等management: endpoints: web: exposure: include: &quot;*&quot; #开启health端点详细检查 endpoint: health: show-details: always 修改主类，在主类上加上@EnableZuulProxy注解，这样就完成了 扩展由于zuul已经集成hystrix，所以当打开详细健康检查时可以看到hystrix已经打开同时查看 http://localhost:1050/actuator/hystrix.stream 注意当没有接口调用时，会显示一直ping,需要调用一个接口，这个页面数据是实时刷新的 参考资料1.自定义zuul过滤器2.zuul比较详细的说明3.springcloud+zuul+hystrix]]></content>
      <categories>
        <category>java</category>
        <category>springcloud</category>
        <category>zuul</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springcloud</tag>
        <tag>zuul</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot集成jooq]]></title>
    <url>%2F2018%2F10%2F26%2Fspringboot%E9%9B%86%E6%88%90jooq%2F</url>
    <content type="text"><![CDATA[前言说明一下springboot2.0.6.RELEASE集成jooq3.10.8以及jooq-codegen-maven3.10.8 目的简单说明一下jooq的集成和用法 正文初始化工程idea初始化工程方法可以参见springcloud编写用户微服务 h2以h2为梨子说明一下添加依赖123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jooq&lt;/artifactId&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 扩展这种不需要写版本的是因为父工程为springboot或者用下面那种写法123456789101112131415161718&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;或者&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;添加驱动工具12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;plugin&gt; &lt;!-- Specify the maven code generator plugin --&gt; &lt;!-- Use org.jooq for the Open Source Edition org.jooq.pro for commercial editions, org.jooq.pro-java-6 for commercial editions with Java 6 support, org.jooq.trial for the free trial edition Note: Only the Open Source Edition is hosted on Maven Central. Import the others manually from your distribution --&gt; &lt;groupId&gt;org.jooq&lt;/groupId&gt; &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt; &lt;!-- The plugin should hook into the generate goal --&gt; &lt;executions&gt; &lt;execution&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;!-- Manage the plugin&apos;s dependency. In this example, we&apos;ll use a PostgreSQL database --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.h2database&lt;/groupId&gt; &lt;artifactId&gt;h2&lt;/artifactId&gt; &lt;version&gt;1.4.197&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- Specify the plugin configuration. The configuration format is the same as for the standalone code generator --&gt; &lt;configuration&gt; &lt;!-- install 跳过 --&gt; &lt;skip&gt;true&lt;/skip&gt; &lt;!-- JDBC connection parameters --&gt; &lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:~/testuser&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt; &lt;/jdbc&gt; &lt;!-- Generator parameters --&gt; &lt;generator&gt; &lt;database&gt; &lt;name&gt;org.jooq.util.h2.H2Database&lt;/name&gt; &lt;includes&gt;.*&lt;/includes&gt; &lt;excludes&gt;&lt;/excludes&gt; &lt;!-- In case your database supports catalogs, e.g. SQL Server: &lt;inputCatalog&gt;public&lt;/inputCatalog&gt; --&gt; &lt;inputSchema&gt;PUBLIC&lt;/inputSchema&gt; &lt;/database&gt; &lt;generate&gt; &lt;instanceFields&gt;true&lt;/instanceFields&gt; &lt;pojos&gt;true&lt;/pojos&gt; &lt;daos&gt;true&lt;/daos&gt; &lt;springAnnotations&gt;true&lt;/springAnnotations&gt; &lt;/generate&gt; &lt;target&gt; &lt;packageName&gt;com.springcloud.consuluser.dao&lt;/packageName&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;/target&gt; &lt;/generator&gt; &lt;/configuration&gt;&lt;/plugin&gt; 扩展1.这是以h2作为梨子，如果要用mysql的话差不过需要修改相关位置2.maven package打包忽略插件 放在pom驱动配置的configuration标签内20181030更新:注意这个标签添加之后，无论编译打包甚至直接运行这个插件都不再生成相关东西，如果你现在需要重新运行一遍，请先提交或者保存你做过的修改，然后注释掉这个，运行完之后再加上，然后再将你做的修改重新添加回来12&lt;!-- install 跳过 --&gt;&lt;skip&gt;true&lt;/skip&gt; 3.需要生成相关dao和实体，添加如下配置123456&lt;generate&gt; &lt;instanceFields&gt;true&lt;/instanceFields&gt; &lt;pojos&gt;true&lt;/pojos&gt; &lt;daos&gt;true&lt;/daos&gt; &lt;springAnnotations&gt;true&lt;/springAnnotations&gt;&lt;/generate&gt; 4.20181030更新:当h2的数据库类型为内存时，结果jooq-codegen-maven无法生成1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:mem:test&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; 需要改成文件类型1234567&lt;!-- JDBC connection parameters --&gt;&lt;jdbc&gt; &lt;driver&gt;org.h2.Driver&lt;/driver&gt; &lt;url&gt;jdbc:h2:~/testmovie&lt;/url&gt; &lt;user&gt;sa&lt;/user&gt; &lt;password&gt;123456&lt;/password&gt;&lt;/jdbc&gt; jooq-codegen-maven以上配置生成的目录结构如下yml配置文件添加相关配置123456789101112131415161718192021222324252627282930313233343536373839404142spring: datasource: #url: jdbc:h2:mem:test #url: jdbc:h2:file:~/.h2/testdb url: jdbc:h2:~/testuser driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true h2: console: settings: web-allow-others: true #进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。 path: /h2-console #进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。 enabled: true #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。 扩展1.上面的配置中添加initialization-mode之后才会初始化schema.sql和data.sql2.initialization-mode配置之后的是druid的补充配置，需结合java程序手动初始化或者添加spring.datasource.type=com.alibaba.druid.pool.DruidDataSource自动初始化，不过这种初始化之前我的druid监控页面无法打开3.h2的控制页面配置如上，如果不加无法访问4.集成druid,详情见springboot集成druid 参考资料java api doc jooq-codegen-maven其他配置 jooq官方example]]></content>
      <categories>
        <category>java</category>
        <category>springboot2</category>
        <category>jooq</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot2</tag>
        <tag>jooq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot集成druid]]></title>
    <url>%2F2018%2F10%2F26%2Fspringboot%E9%9B%86%E6%88%90druid%2F</url>
    <content type="text"><![CDATA[前言Druid是Java语言中最好的数据库连接池。Druid能够提供强大的监控和扩展功能 目的springboot2.0.6.RELEASE集成druid1.1.10 正文添加依赖12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; 添加配置123456789101112131415161718192021222324252627282930313233343536spring: datasource: #url: jdbc:h2:mem:test #url: jdbc:h2:file:~/.h2/testdb url: jdbc:h2:~/testuser driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true 初始化datasource1.添加spring.datasource.type=com.alibaba.druid.pool.DruidDataSource自动初始化，不过这种初始化之前我的druid监控页面无法打开2.利用java程序手动初始化在java源码，springboot主程序的所在目录的子目录下，添加如下两个文件DataSourceBean.java和DatasourceConf.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)@Component@Datapublic class DatasourceConf &#123; private String url; private String username; private String password; private String driverClassName; private int initialSize; private int minIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private Boolean testWhileIdle; private Boolean testOnBorrow; private Boolean testOnReturn; private Boolean poolPreparedStatements; private int maxPoolPreparedStatementPerConnectionSize; private String filters; private String connectionProperties; private Boolean useGlobalDataSourceStat;&#125;@Configuration@Component@Datapublic class DataSourceBean &#123; private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceBean.class); @Autowired DatasourceConf datasourceConf; @Bean public DataSource getDataSource() &#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(datasourceConf.getUrl()); datasource.setUsername(datasourceConf.getUsername()); datasource.setPassword(datasourceConf.getPassword()); datasource.setDriverClassName(datasourceConf.getDriverClassName()); //configuration datasource.setInitialSize(datasourceConf.getInitialSize()); datasource.setMinIdle(datasourceConf.getMinIdle()); datasource.setMaxActive(datasourceConf.getMaxActive()); datasource.setMaxWait(datasourceConf.getMaxWait()); datasource.setTimeBetweenEvictionRunsMillis(datasourceConf.getTimeBetweenEvictionRunsMillis()); datasource.setMinEvictableIdleTimeMillis(datasourceConf.getMinEvictableIdleTimeMillis()); datasource.setValidationQuery(datasourceConf.getValidationQuery()); datasource.setTestWhileIdle(datasourceConf.getTestWhileIdle()); datasource.setTestOnBorrow(datasourceConf.getTestOnBorrow()); datasource.setTestOnReturn(datasourceConf.getTestOnReturn()); datasource.setPoolPreparedStatements(datasourceConf.getPoolPreparedStatements()); datasource.setMaxPoolPreparedStatementPerConnectionSize(datasourceConf.getMaxPoolPreparedStatementPerConnectionSize()); datasource.setUseGlobalDataSourceStat(datasourceConf.getUseGlobalDataSourceStat()); try &#123; datasource.setFilters(datasourceConf.getFilters()); &#125; catch (SQLException e) &#123; LOGGER.error(&quot;druid configuration initialization filter: &quot; + e); &#125; datasource.setConnectionProperties(datasourceConf.getConnectionProperties()); return datasource; &#125; /** * 配置监控服务器 * * @return 返回监控注册的servlet对象 */ @Bean public ServletRegistrationBean statViewServlet() &#123; ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;); // 添加IP白名单 servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;192.168.14.32,127.0.0.1&quot;); // 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高 servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.168.14.32&quot;); // 添加控制台管理用户 servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;druid&quot;); servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;); // 是否能够重置数据 servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;); return servletRegistrationBean; &#125; /** * 配置服务过滤器 * * @return 返回过滤器配置对象 */ @Bean public FilterRegistrationBean statFilter() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter()); // 添加过滤规则 filterRegistrationBean.addUrlPatterns(&quot;/*&quot;); // 忽略过滤格式 filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*,&quot;); return filterRegistrationBean; &#125;&#125; 参考资料Druid 介绍及配置]]></content>
      <categories>
        <category>java</category>
        <category>springboot2</category>
        <category>druid</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot2</tag>
        <tag>druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud编写用户微服务]]></title>
    <url>%2F2018%2F10%2F26%2Fspringcloud%E7%BC%96%E5%86%99%E7%94%A8%E6%88%B7%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[前言1.springcloud Finchley.SR2版本2.springboot 版本2.0.6.RELEASE3.h24.jooq5.consul搭建一个用户微服务 目的利用idea快速搭建一个springcloud集成上述功能的微服务，可以查询用户 正文初始化工程方法跟springcloud集成consul中前期准备工程一般，勾选下列依赖在resources文件夹下新增bootstrap.yml文件，写入以下内容123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1016spring: application: #项目名称 name: consul-user cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: consul-user #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.101:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 启动主工程,查看consul ui发现程序正常注册 如果程序未能正常注册，查看程序是否正常启动或者这里的ip需要写成程序所在机器的ip,consul集群所在的机器能够访问 初始化H2数据库由于已经使用了consul作为配置中心,直接在consul配置界面新增如下配置启动之后发现datasource循环依赖这时候决定手动初始化datasource,同时集成第三方数据库连接池进来，详情springboot集成druid此时consul上的配置如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647spring: datasource: url: jdbc:h2:mem:test #内存 #url: jdbc:h2:file:~/.h2/testdb #文件 driverClassName: org.h2.Driver username: sa password: 123456 platform: h2 schema: classpath:db/schema.sql data: classpath:db/data.sql initialization-mode: always #springboot2.0加上上述sql才会执行 # 下面为druid连接池的补充设置，应用到上面所有数据源中 # 初始化大小，最小，最大 initialSize: 1 minIdle: 3 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 30000 validationQuery: select &apos;x&apos; testWhileIdle: true testOnBorrow: false testOnReturn: false # 打开PSCache，并且指定每个连接上PSCache的大小 poolPreparedStatements: true maxPoolPreparedStatementPerConnectionSize: 20 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计 filters: stat # 通过connectProperties属性来打开mergeSql功能；慢SQL记录 connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 # 合并多个DruidDataSource的监控数据 useGlobalDataSourceStat: true h2: console: settings: web-allow-others: true #进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。 path: /h2-console #进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。 enabled: true #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。logging: level: root: INFO org.hibernate: INFO org.hibernate.type.descriptor.sql.BasicBinder: TRACE org.hibernate.type.descriptor.sql.BasicExtractor: TRACE 根据配置在resources目录下，新增db文件夹，下面新增schema.sql和data.sql文件，内容分别如下12345drop table user if exists;create table user (id bigint generated by default as identity ,username varchar(40),name varchar(20),age int(3),balance decimal(10,2),primary key (id));insert into user (id,username,name,age,balance) values (1,&apos;admin&apos;,&apos;zb&apos;,20,100.00);insert into user (id,username,name,age,balance) values (2,&apos;liuman&apos;,&apos;柳曼&apos;,20,101.00); 在pom中添加依赖druid12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt; 在主程序平级目录新增db目录，新增DataSourceBean.java和DatasourceConf.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101@Configuration@Component@Datapublic class DataSourceBean &#123; private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceBean.class); @Autowired DatasourceConf datasourceConf; @Bean public DataSource getDataSource() &#123; DruidDataSource datasource = new DruidDataSource(); datasource.setUrl(datasourceConf.getUrl()); datasource.setUsername(datasourceConf.getUsername()); datasource.setPassword(datasourceConf.getPassword()); datasource.setDriverClassName(datasourceConf.getDriverClassName()); //configuration datasource.setInitialSize(datasourceConf.getInitialSize()); datasource.setMinIdle(datasourceConf.getMinIdle()); datasource.setMaxActive(datasourceConf.getMaxActive()); datasource.setMaxWait(datasourceConf.getMaxWait()); datasource.setTimeBetweenEvictionRunsMillis(datasourceConf.getTimeBetweenEvictionRunsMillis()); datasource.setMinEvictableIdleTimeMillis(datasourceConf.getMinEvictableIdleTimeMillis()); datasource.setValidationQuery(datasourceConf.getValidationQuery()); datasource.setTestWhileIdle(datasourceConf.getTestWhileIdle()); datasource.setTestOnBorrow(datasourceConf.getTestOnBorrow()); datasource.setTestOnReturn(datasourceConf.getTestOnReturn()); datasource.setPoolPreparedStatements(datasourceConf.getPoolPreparedStatements()); datasource.setMaxPoolPreparedStatementPerConnectionSize(datasourceConf.getMaxPoolPreparedStatementPerConnectionSize()); datasource.setUseGlobalDataSourceStat(datasourceConf.getUseGlobalDataSourceStat()); try &#123; datasource.setFilters(datasourceConf.getFilters()); &#125; catch (SQLException e) &#123; LOGGER.error(&quot;druid configuration initialization filter: &quot; + e); &#125; datasource.setConnectionProperties(datasourceConf.getConnectionProperties()); return datasource; &#125; /** * 配置监控服务器 * * @return 返回监控注册的servlet对象 */ @Bean public ServletRegistrationBean statViewServlet() &#123; ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;); // 添加IP白名单 servletRegistrationBean.addInitParameter(&quot;allow&quot;, &quot;192.168.14.32,127.0.0.1&quot;); // 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高 servletRegistrationBean.addInitParameter(&quot;deny&quot;, &quot;192.168.14.32&quot;); // 添加控制台管理用户 servletRegistrationBean.addInitParameter(&quot;loginUsername&quot;, &quot;druid&quot;); servletRegistrationBean.addInitParameter(&quot;loginPassword&quot;, &quot;123456&quot;); // 是否能够重置数据 servletRegistrationBean.addInitParameter(&quot;resetEnable&quot;, &quot;false&quot;); return servletRegistrationBean; &#125; /** * 配置服务过滤器 * * @return 返回过滤器配置对象 */ @Bean public FilterRegistrationBean statFilter() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter()); // 添加过滤规则 filterRegistrationBean.addUrlPatterns(&quot;/*&quot;); // 忽略过滤格式 filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*,&quot;); return filterRegistrationBean; &#125;&#125;@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)@Component@Datapublic class DatasourceConf &#123; private String url; private String username; private String password; private String driverClassName; private int initialSize; private int minIdle; private int maxActive; private int maxWait; private int timeBetweenEvictionRunsMillis; private int minEvictableIdleTimeMillis; private String validationQuery; private Boolean testWhileIdle; private Boolean testOnBorrow; private Boolean testOnReturn; private Boolean poolPreparedStatements; private int maxPoolPreparedStatementPerConnectionSize; private String filters; private String connectionProperties; private Boolean useGlobalDataSourceStat;&#125; 重新启动主程序，此时会报一个小错，具体原因是由于druid开启了如下配置，当数据库为h2并且需要执行新增表操作时，sql统计分析会合并异常，具体看github上面的issue12# 配置监控统计拦截的filters，去掉后监控界面sql无法统计filters: stat 检查1.查看h2 ui,是否user表和数据是否写入 http://localhost:1016/h2-console/2.查看druid监控页面 http://127.0.0.1:1016/druid/sql.html 集成jooq generate工具具体教程可见springboot集成jooq 扩展在maven package时，由于集成了jooq generate工具，会执行一遍，这样如果自己修改了相关类会被还原，所以在打包时希望不执行相关驱动可以加如下配置 放在pom驱动配置的configuration标签内20181030更新:注意这个标签添加之后，无论编译打包甚至直接运行这个插件都不再生成相关东西，如果你现在需要重新运行一遍，请先提交或者保存你做过的修改，然后注释掉这个，运行完之后再加上，然后再将你做的修改重新添加回来12&lt;!-- install 跳过 --&gt;&lt;skip&gt;true&lt;/skip&gt;在打包的过程中，执行了springboot中的一些test，当从consul上远程读取yml配置时爆了如下错，忽略测试打包成功后，启动工程仍然报错，然而idea中自己run的时候却没有报错对比了相关命令远程yml配置中含有中文，务必在使用java -Dfile.encoding=UTF-8 -jar .\consul-user-0.0.1-SNAPSHOT.jar指定utf8编码不然打包会失败，启动失败，会报上面的错https://github.com/jOOQ/jOOQ/blob/master/jOOQ-examples/jOOQ-spring-example/pom.xml]]></content>
      <categories>
        <category>java</category>
        <category>微服务</category>
        <category>springcloud</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jooq</tag>
        <tag>springcloud</tag>
        <tag>h2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springcloud集成consul]]></title>
    <url>%2F2018%2F10%2F23%2Fspringcloud%E9%9B%86%E6%88%90consul%2F</url>
    <content type="text"><![CDATA[前言1.springcloud Finchley.SR2版本2.springboot 版本2.0.6.RELEASE集成consul作为配置中心和服务发现中心，同时开启健康检查 目的利用idea快速搭建一个springcloud集成上述功能的微服务 正文利用idea新建工程新建springboot maven工程设置项目信息勾选自动配置勾选consul配置中心勾选consul服务发现中心完成 新建bootstrap.yml文件,添加如下内容，并启动主程序123456789101112131415161718192021222324252627282930313233343536#tomcat启动启动端口server: port: 1015spring: application: #项目名称 name: springcloud-consul cloud: consul: #consul server的host或者ip host: localhost #consul server的端口 port: 18500 config: #开启consul配置中心 enabled: true #consul表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES format: YAML #表示consul上面的KEY值(或者说文件的名字) 默认是data data-key: configuration #prefix设置配置值的基本文件夹 prefix: config #defaultContext设置所有应用程序使用的文件夹名 default-context: $&#123;spring.application.name&#125; discovery: #开启consul服务发现 enabled: true #开启consul服务的名称 service-name: springcloud-consul #服务检查的路径 health-check-path: /actuator/health #服务检查的时间间隔 health-check-interval: 10s #服务检查的完整路径 health-check-url: http://192.168.0.101:$&#123;server.port&#125;$&#123;spring.cloud.consul.discovery.health-check-path&#125; tags: dev 启动主程序,发现报错添加依赖1234 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 重新启动正常访问健康检查端点 http://ip:port/actuator/health 在consul ui上查看访问consul ui http://localhost:18500/ consul 作为配置中心访问consul ui 添加配置信息12app: port: 3232 新增conf目录，新增如下代码12345678910111213141516@Component@ConfigurationProperties(prefix = &quot;app&quot;)@Datapublic class AppConf &#123; private static final Logger LOGGER = LoggerFactory.getLogger(AppConf.class); private int port; @PostConstruct public void printConf()&#123; LOGGER.info(&quot;加载配置port:[&#123;&#125;]&quot;,port); &#125;&#125;重新启动主程序 附加工程pom1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.springcloud&lt;/groupId&gt; &lt;artifactId&gt;consul1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;consul1&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.6.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Finchley.SR2&lt;/spring-cloud.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 参考资料springcloud-consul中文文档]]></content>
      <categories>
        <category>java</category>
        <category>微服务</category>
        <category>springcloud</category>
        <category>consul</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>consul</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows上安装docker-ce]]></title>
    <url>%2F2018%2F10%2F21%2Fwindows%E4%B8%8A%E5%AE%89%E8%A3%85docker-ce%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>windows</category>
        <category>docker</category>
        <category>安装</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>安装</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-compose搭建consul集群]]></title>
    <url>%2F2018%2F10%2F21%2Fdocker-compose%E6%90%AD%E5%BB%BAconsul%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>docker-compose</category>
        <category>consul集群</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>consul集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot+Aop+自定义注解实现日志记录]]></title>
    <url>%2F2018%2F10%2F21%2Fspringboot-Aop-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[前言 AOP（Aspect Orient Programming），也就是面向方面编程，作为面向对象编程的一种补充，专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在Java EE应用中，常常通过AOP来处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等。AOP实现的关键就在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理两大类，静态代理以AspectJ为代表；而动态代理则以Spring AOP为代表 目的简单说明一下AspectJ，另外实现一个springboot+Aop+自定义注解实现日志记录的梨子 正文AspectJAspectJ 是一个基于 Java 语言的 AOP 框架，提供了强大的 AOP 功能，其他很多 AOP 框架都借鉴或采纳其中的一些思想。AspectJ 是 Java 语言的一个 AOP 实现，其主要包括两个部分：第一个部分定义了如何表达、定义 AOP 编程中的语法规范，通过这套语言规范，我们可以方便地用 AOP 来解决 Java 语言中存在的交叉关注点问题；另一个部分是工具部分，包括编译器、调试工具等。AspectJ 是编译期增强的框架，需要遵从相关语法然后用他的工具编译织入 springboot aop添加依赖123456789101112&lt;!-- AOP依赖模块 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 测试 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667自定义注解@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface AnalysisActuator &#123; String note() default &quot;&quot;;&#125;定义切面@Aspect@Componentpublic class AnalysisActuatorAspect &#123; final static Logger log = LoggerFactory.getLogger(AnalysisActuatorAspect.class); ThreadLocal&lt;Long&gt; beginTime = new ThreadLocal&lt;&gt;(); @Pointcut(&quot;@annotation(analysisActuator)&quot;) public void serviceStatistics(AnalysisActuator analysisActuator) &#123; &#125; @Before(&quot;serviceStatistics(analysisActuator)&quot;) public void doBefore(JoinPoint joinPoint, AnalysisActuator analysisActuator) &#123; // 记录请求到达时间 beginTime.set(System.currentTimeMillis()); &#125; @After(&quot;serviceStatistics(analysisActuator)&quot;) public void doAfter(AnalysisActuator analysisActuator) &#123; log.info(&quot;statistic time:&#123;&#125;, note:&#123;&#125;&quot;, System.currentTimeMillis() - beginTime.get(), analysisActuator.note()); &#125;&#125;服务改写@Servicepublic class PersonServiceForAopImpl implements PersonService &#123; @AnalysisActuator(note = &quot;[PersonServiceForAopImpl]插入&quot;) @Override public int insert(Object obj) &#123; System.out.println(&quot;成功插入一个person&quot;); return 1; &#125; @AnalysisActuator(note = &quot;[PersonServiceForAopImpl]更新&quot;) @Override public int update(Object obj) &#123; System.out.println(&quot;成功更新一个person&quot;); return 1; &#125;&#125;测试服务@RunWith(SpringRunner.class)@SpringBootTestpublic class TestPersonServiceForAopImpl &#123; @Qualifier(&quot;personServiceForAopImpl&quot;) @Autowired PersonService personService; @Test public void testInsert()&#123; personService.insert(new Object()); &#125;&#125; 执行结果 参考资料1.Spring AOP实现原理与CGLIB应用2.使用Spring Boot的AOP处理自定义注解]]></content>
      <categories>
        <category>java</category>
        <category>springboot</category>
        <category>aop</category>
        <category>注解</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>aop</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CGLib代理]]></title>
    <url>%2F2018%2F10%2F21%2FCGLib%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言java动态代理这篇博客介绍了java的动态代理，那么这里同样不得不介绍一下CGLib代理。JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理.cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理 目的简单介绍一下cglib的代理应用 正文同样用java动态代理的那个梨子 cglib代理添加依赖12345&lt;dependency&gt; &lt;groupId&gt;cglib&lt;/groupId&gt; &lt;artifactId&gt;cglib&lt;/artifactId&gt; &lt;version&gt;3.2.4&lt;/version&gt;&lt;/dependency&gt;12345678910111213141516171819202122232425262728293031public class CglibProxyInterceptor implements MethodInterceptor &#123; //通过Enhancer 创建代理对象 private Enhancer enhancer = new Enhancer(); //通过Class对象获取代理对象 public &lt;T&gt; T getProxy(Class c)&#123; //设置创建子类的类 enhancer.setSuperclass(c); enhancer.setCallback(this); return (T)enhancer.create(); &#125; @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123; System.out.println(&quot;CglibProxyInterceptor 代理方法&quot;); return methodProxy.invokeSuper(o,objects); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); CglibProxyInterceptor proxy = new CglibProxyInterceptor(); PersonService personServiceProxy = proxy.getProxy(PersonServiceImpl.class); personServiceProxy.insert(new Object()); personServiceProxy.update(new Object()); &#125;&#125;执行结果与java动态代理相比123456相同点: 1.两个都新增了一个代理类，代理的类限制不大,扩展性很高 2.两种方式都不需要修改接口类以及实现类，只需要修改调用的地方即可，利用代理类调用不同点: 1.jdk动态代理需要对接口代理，cglib对非final修辞的类都可以代理 2.cglib是第三方包,需要添加依赖]]></content>
      <categories>
        <category>java</category>
        <category>CGLib</category>
        <category>代理</category>
      </categories>
      <tags>
        <tag>CGLib</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java动态代理]]></title>
    <url>%2F2018%2F10%2F21%2Fjava%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言java反射基础用法这边博客讲解了java反射的一些基础用法，那么动态代理就是利用反射实现的一个高级用法 目的简单介绍一下动态代理的用法，JDK提供的代理只能针对接口做代理,我们有更强大的代理CGLib代理 正文假设有个personservice服务类接口以及实现类，现如今需要在尽可能少量修改代码的前提下，让原来的方法增加一些其他方法1234567891011121314151617181920212223public interface PersonService &#123; //插入一个person int insert(Object obj); //更新一个person int update(Object obj);&#125;public class PersonServiceImpl implements PersonService &#123; @Override public int insert(Object obj) &#123; System.out.println(&quot;成功插入一个person&quot;); return 1; &#125; @Override public int update(Object obj) &#123; System.out.println(&quot;成功更新一个person&quot;); return 1; &#125;&#125; 静态代理123456789101112131415161718192021222324252627282930313233public class SimplePersonServiceProxy implements PersonService&#123; //被代理接口类 private PersonService personService; public SimplePersonServiceProxy(PersonService personService) &#123; this.personService = personService; &#125; @Override public int insert(Object obj) &#123; System.out.println(&quot;SimplePersonServiceProxy 插入静态代理方法&quot;); return personService.insert(obj); &#125; @Override public int update(Object obj) &#123; System.out.println(&quot;SimplePersonServiceProxy 更新静态代理方法&quot;); return personService.update(obj); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); //增加功能的调用方法，原来的PersonService和PersonServiceImpl代码都不需要变 PersonService proxy = new SimplePersonServiceProxy(new PersonServiceImpl()); proxy.insert(new Object()); proxy.update(new Object()); &#125;&#125; 执行结果: 动态代理12345678910111213141516171819202122232425262728public class DynamicProxyHandler implements InvocationHandler &#123; //被代理对象，这里跟静态代理对比，这里的代码扩展性更高，可以是任何对象 private Object object; public DynamicProxyHandler(Object object) &#123; this.object = object; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;DynamicProxyHandler java动态代理方法&quot;); return method.invoke(object,args); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); //增加功能的调用方法，原来的PersonService和PersonServiceImpl代码都不需要变 PersonService proxy = (PersonService) Proxy.newProxyInstance(PersonService.class.getClassLoader(),new Class[]&#123;PersonService.class&#125;,new DynamicProxyHandler(new PersonServiceImpl())); proxy.insert(new Object()); proxy.update(new Object()); &#125;&#125; 执行结果:对比两种方式，我们可以得出结论123456789相同点: 1.两个都新增了一个代理类，并且属性都是代理类，只不过静态代理的属性限制的更大，必须是 代理接口类 2.两种方式都不需要修改接口类以及实现类，只需要修改调用的地方即可，利用代理类调用不同点 1.静态代理需要实现代理接口，并且属性为代理类接口，这说明每个接口都需要实现一个静态代 理类，扩展性不高，正因为如此，其每个代理的类中的方法可以各自写相关的代理方法 2.动态代理类由于其属性为Object,所以可以代理任何接口,扩展性高，不过由于每个方法执行 前的代理方法都是一样的，所以更适合做一些通用的代理]]></content>
      <categories>
        <category>java</category>
        <category>动态代理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java反射基础用法]]></title>
    <url>%2F2018%2F10%2F15%2Fjava%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言Java让我们在运行时识别对象和类的信息，主要有2种方式:12传统的RTTI，它假定我们在编译时已经知道了所有的类型信息;反射机制，它允许我们在运行时发现和使用类的信息; 目的简单介绍一下反射的机制和应用. 正文class对象class对象包含了与类有关的信息,是用来创建所有“常规”对象的.每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类.Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的 扩展1234567891011121314151617181920212223242526272829303132public class TestClass &#123; public static void main(String[] args) &#123; //静态内部类-静态属性 System.out.println(InnerClass.staticName); System.out.println(&quot;**************************&quot;); //静态内部类-普通属性 InnerClass in = new InnerClass(); System.out.println(in.name); System.out.println(&quot;**************************&quot;); //外部类-普通属性 System.out.println(new OutterClass().outterName); System.out.println(&quot;**************************&quot;); //外部类-静态属性 System.out.println(OutterClass.outterStaticName); &#125; static class InnerClass &#123; public static String staticName = &quot;innerStaticName&quot;; public String name = &quot;innerName&quot;; static &#123; System.out.println(&quot;静态内部类静态块&quot;); &#125; public InnerClass() &#123; System.out.println(&quot;静态内部类已经构造好了&quot;); &#125; &#125;&#125;上面代码运行的结果:结论: 说明当第一次引用一个类的静态属性时，该类会加载到jvm中并调用静态块初始化类时会调用相应构造方法，由于该类已经加载到jvm中，所以不会调用静态块第三点同时印证了第二点，第一次初始化某个类时，该类加载到jvm中，首先调用静态块方法，然后调用相应构造方法第四点印证第二点 获取class对象引用的两种方式及区别12使用功能”.class”来创建Class对象的引用使用功能Class.forName(“xxx”) 区别:想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤:123加载：由类加载器完成，找到对应的字节码，创建一个Class对象链接：验证类中的字节码，为静态域分配空间初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 扩展1234567891011121314151617181920212223242526272829303132333435363738394041public class BaseMain &#123; public static void main(String[] args) throws Exception &#123; //通过obj.class获取class对象的引用 Class clz1 = StaticBase.class; System.out.println(&quot;*********************&quot;); //通过Class.获取class对象的引用--静态内部类 Class clz2 = Class.forName(&quot;com.example.demo.java.reflect.BaseMain$StaticBase&quot;); //通过Class.获取class对象的引用--普通内部类 Class clz3 = Class.forName(&quot;com.example.demo.java.reflect.BaseMain$Base&quot;); System.out.println(&quot;*********************&quot;); //内部类的构造方法获取 clz3也可以换成Base.class Constructor con3 = clz3.getDeclaredConstructor(BaseMain.class); //私有构造需要设置 con3.setAccessible(true); Object obj3 = con3.newInstance(BaseMain.class.newInstance()); &#125; static class StaticBase &#123; static int num = 1; static &#123; System.out.println(&quot;StaticBase 静态块:num = &quot; + num); &#125; &#125; public class BaseParent&#123; public BaseParent() &#123; System.out.println(&quot;父类被构造了&quot;); &#125; &#125; private class Base extends BaseParent&#123; int num = 2; private Base() &#123; System.out.println(&quot;普通内部类被构造了:num = &quot; + num); &#125; &#125;&#125;执行结果:结论123obj.class确实不会初始化类Class.forName会调用静态块初始化子类构造先初始化父类构造 反射获取私有属性和方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class ReflectDemo &#123; public static void main(String[] args) throws Exception &#123; OutterClass out = new OutterClass(); System.out.println(&quot;***************&quot;); getAllFields(out); System.out.println(&quot;***************&quot;); getAllMethods(out); &#125; /** * 获取一个对象的所有属性 * @param obj */ public static void getAllFields (Object obj) throws Exception&#123; //获取该类包括父类的属性，未注释的表示只有该类的 //Field[] fields = obj.getClass().getFields(); Field[] fields = obj.getClass().getDeclaredFields(); for(Field f : fields)&#123; f.setAccessible(true); System.out.println(&quot;属性-值:&quot;+f.getName()+&quot;-&quot;+f.get(obj)); &#125; &#125; public static void getAllMethods (Object obj) throws Exception &#123; //获取该类包括父类的属性，未注释的表示只有该类的 //Method[] methods = obj.getClass().getMethods(); Method[] methods = obj.getClass().getDeclaredMethods(); for(Method m : methods)&#123; m.setAccessible(true); System.out.println(m+&quot;\n参数个数:&quot;+m.getParameterCount()); switch (m.getParameterCount())&#123; case 0: m.invoke(obj); break; case 1: m.invoke(obj,&quot;hello&quot;); break; default: System.out.println(&quot;参数个数大于1&quot;); &#125; &#125; &#125;&#125; 执行结果:]]></content>
      <categories>
        <category>java</category>
        <category>语法</category>
        <category>反射</category>
      </categories>
      <tags>
        <tag>java语法</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[okhttp3链式调用]]></title>
    <url>%2F2018%2F10%2F13%2Fokhttp3%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言HTTP是现代应用常用的一种交换数据和媒体的网络方式，高效地使用HTTP能让资源加载更快，节省带宽。OkHttp是一个高效的HTTP客户端，它有以下默认特性：1234支持HTTP/2，允许所有同一个主机地址的请求共享同一个socket连接连接池减少请求延时透明的GZIP压缩减少响应数据的大小缓存响应内容，避免一些完全重复的请求 目的介绍一些okhttp3的基本用法 正文获取OkHttpClient客户端12345678//简单获取OkHttpClient client = new OkHttpClient();//设置超时时间private static final OkHttpClient client = new OkHttpClient.Builder() .connectTimeout(10, TimeUnit.SECONDS) .readTimeout(20, TimeUnit.SECONDS) .build(); get请求普通get请求1234567891011121314String url = &quot;https://www.baidu.com/&quot;;OkHttpClient okHttpClient = new OkHttpClient();Request request = new Request.Builder() .url(url) .build();Call call = okHttpClient.newCall(request);try &#123; Response response = call.execute(); if (response.isSuccessful()) &#123; System.out.println(response.body().string()); &#125;&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 设置header参数可以设置例如Cookie，User-Agent什么的123456Request request = new Request.Builder() .url(url) .header(&quot;键&quot;, &quot;值&quot;) .header(&quot;键&quot;, &quot;值&quot;) ... .build(); post请求普通的表单提交1234567891011121314151617181920String url = &quot;https://www.baidu.com/&quot;;OkHttpClient okHttpClient = new OkHttpClient();RequestBody body = new FormBody.Builder() .add(&quot;键&quot;, &quot;值&quot;) .add(&quot;键&quot;, &quot;值&quot;) .build();Request request = new Request.Builder() .url(url) .post(body) .build();Call call = okHttpClient.newCall(request);try &#123; Response response = call.execute(); System.out.println(response.body().string());&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 参考资料OkHttp3的基本用法 简书 许宏川]]></content>
      <categories>
        <category>java</category>
        <category>http调用客户端</category>
      </categories>
      <tags>
        <tag>http调用客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xxl-job-V1.9.1实现jobapi远程调用]]></title>
    <url>%2F2018%2F10%2F12%2Fxxl-job-V1-9-1%E5%AE%9E%E7%8E%B0jobapi%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言xxl-job是一个非常好用的分布式java任务调度框架,目前实际应用中框架建议我们在其管理页面手动新增调度任务,但是由于一些情况,我们更加希望能够通过代码动态添加job,官方在job-core中提供了相关api,位置:com.xxl.job.core.biz.AdminBiz.java但是提供的功能有限,无法满足我们的需求,但是根据后面官方的说法，可以通过修改xxl-jobadmin的源码,实现其部分接口可以绕过登陆来远程调用 目的通过修改xxl-jobadmin的源码,实现其部分接口可以绕过登陆来远程调用:1234567任务列表查询任务新增任务更新任务删除任务暂停任务恢复任务触发 正文下载xxl-job-v1.9.1的源码xxl-job-v1.9.1 下载地址 目前我们用的是v1.9.1的,此版本适合这种方式，如果是后续版本建议看一下官方文档，没准官方给出了更合适的方法 修改源码重新打包准确修改位置为com.xxl.job.admin.controller.JobInfoController中的接口方法上加上@PermessionLimit(limit = false) 测试通过postman调用接口,一个是未修改源码的,请求被登陆拦截修改源码后，调用后通过json方式返回 参考资料1.官方针对远程调用的方法解决]]></content>
      <categories>
        <category>java</category>
        <category>分布式</category>
        <category>任务调度框架</category>
      </categories>
      <tags>
        <tag>xxl-job</tag>
        <tag>分布式java调度框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux上安装docker-compose]]></title>
    <url>%2F2018%2F09%2F10%2Flinux%E4%B8%8A%E5%AE%89%E8%A3%85docker-compose%2F</url>
    <content type="text"><![CDATA[前言linux上安装docker-compose,为了在安装了docker的机器上更加方便的编排容器 目的利用docker-compose快速编排docker容器 正文wget1wget https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64 如果wget没有安装,利用下面命令安装1yum install wget另外如果wget下载不下来,因为直接从github上下载,国内可能网速并不理想docker-compose v1.22.0 下载提取码:ixnx mv并设置环境变量1234567891011mv docker-compose-Linux-x86_64 docker-composemkdir -p /apps/softs/docker_compose/cd /apps/softs/docker_compose/cp /dev/zkandkafka/docker-compose /apps/softs/docker_compose/chmod +x docker-compose修改环境变量vi /etc/profileDOCKER_COMPOSE_HOME=/apps/softs/docker_compose/PATH=$PATH:$DOCKER_COMPOSE_HOMEexport PATHsource /etc/profile 验证1docker-compose -v 其他docker-compose版本]]></content>
      <categories>
        <category>docker-compose</category>
        <category>docker服务编排工具</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>docker服务编排工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java程序打成docker镜像]]></title>
    <url>%2F2018%2F08%2F25%2Fjava%E7%A8%8B%E5%BA%8F%E6%89%93%E6%88%90docker%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[前言本片教程适合idea+java+maven的环境,另外需要有docker环境,如果windows上没有，可以将程序拷贝到linux上有docker的环境上执行相关操作docker环境安装教程[] 目的将java程序打进docker镜像中,方便docker方式部署 正文mavne添加以下依赖并执行生成Dockerfile在pom文件的bulid中添加如下驱动123456789101112131415161718192021&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;api&lt;/imageName&gt; &lt;baseImage&gt;java&lt;/baseImage&gt; &lt;maintainer&gt;test@email.com&lt;/maintainer&gt; &lt;workdir&gt;/ROOT&lt;/workdir&gt; &lt;cmd&gt;["java", "-version"]&lt;/cmd&gt; &lt;entryPoint&gt;["java", "-jar", "$&#123;project.build.finalName&#125;.jar"]&lt;/entryPoint&gt; &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/ROOT&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt;执行docker_build之后会自动生成Dockerfile,如果你的windows上有docker,会生成镜像,由于我的机器上没有，因为新版的docker安装到window上有系统限制，详情查看这篇博客[]Dockerfile内容如下123456FROM javaMAINTAINER test@email.comWORKDIR /ROOTADD /ROOT/xxx.jar /ROOT/ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;xxx.jar&quot;]CMD [&quot;java&quot;, &quot;-version&quot;] 转移到linux上有docker环境的机器上开始build修改一下Dockerfile,将配置文件也打入进去,上面驱动也可以改造成通过Dockerfile打包,而不是写到pom中1234567FROM javaMAINTAINER test@email.comWORKDIR /ROOTADD ./xxx.jar /ROOT/ADD ./conf /ROOT/ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;xxx.jar&quot;]CMD [&quot;java&quot;, &quot;-version&quot;]linux上目录结构如下执行build指令1docker build -t job:0814 .终端打印成功截图docker images验证截图]]></content>
      <categories>
        <category>java</category>
        <category>Dockerfile</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>java</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker镜像迁移]]></title>
    <url>%2F2018%2F08%2F24%2Fdocker%E9%95%9C%E5%83%8F%E8%BF%81%E7%A7%BB%2F</url>
    <content type="text"><![CDATA[前言一般正规的做法应该是将自己做好的镜像push到远程仓库去,然后需要的时候从远处仓库拉取.由于目前我还没有建立私有远程仓库所以这篇博客主要是讲手动导出镜像的方法 目的手动导出镜像以便于在其他地方使用 正文查看镜像列表1docker images save导出镜像指令: docker save repository:tag &gt; 自定义导出名字.tar 推荐或者 docker save image_id &gt; 自定义导出名字.tar1docker save webapi:0814 &gt; webapi0814.tar截图: load导入镜像1docker load -qi webapi0814.tar 截图:验证:docker images 查看一下导入情况,这里说明一下,如果之前指令是通过save imageid导出的镜像的话,这里导入的时候仓库和标签名可能为空,推荐save repository:tag导出]]></content>
      <categories>
        <category>docker</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>镜像</tag>
        <tag>迁移</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker离线安装包准备]]></title>
    <url>%2F2018%2F08%2F23%2Fdocker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[前言在一台有网络的centos上准备docker-ce.18离线安装包,然后可以根据docker离线安装这篇博客离线安装docker下面的操作都是在有网络的centos7上进行操作的 目的为离线安装docker提供相关依赖和程序包 正文建立本地文件夹1mkdir -p /apps/docker/packages 修改yum源镜像地址先看一下有没有wget ,没有先装一下，在备份1yum install wget备份原来的repo123cd /etc/yum.repos.d/mkdir backupmv ./CentOS-* ./backup/下载阿里的镜像源并应用123wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repoyum clean allyum makecache截图: 下载createrepo软件包及其依赖1repotrack -a x86_64 -p /apps/docker/packages createrepo 如果上诉指令不存在,先安装yum-utils1yum install -y yum-utils截图:再次执行repotrack上面那个指令,开始下载依赖包截图:下载libgudev1和systemd-sysv，是因为centos7.2的libgudev1和systemd-sysv依赖systemd-219-19.el7.x86_64，而docker-ce需要systemd-219-30el7.x86_64.下载 libgudev1和systemd-sysv软件包机器依赖12repotrack -a x86_64 -p /apps/docker/packages libgudev1repotrack -a x86_64 -p /apps/docker/packages systemd-sysv 下载docker-ce及依赖由于你的yum远程仓库可能没有docker-ce的相关依赖,建议之前先执行下面的命令添加阿里的docker仓库镜像1yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo然后下载docker-ce相关依赖1repotrack -a x86_64 -p /apps/docker/packages docker-ce 压缩下载执行下面的命令,将在/apps/docker目录下生成一个docker-ce-18-offline-yum.tgz的包,这个包通过xftp下载后可以在其他地方离线安装docker只要离线的电脑上有yum命令并且是centos7以上的系统12cd /apps/dockertar -zcvf docker-ce-18-offline-yum.tgz /apps/docker/packages]]></content>
      <categories>
        <category>docker</category>
        <category>离线</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>离线</tag>
        <tag>安装包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo在多台电脑之间迁移写作]]></title>
    <url>%2F2018%2F08%2F21%2Fhexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E4%B9%8B%E9%97%B4%E8%BF%81%E7%A7%BB%E5%86%99%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言首先根据[]这篇博客将hexo部署到github上,注意最后的效果需是hexo源文件包在远程dev分支下，hexo编译后的静态文件在master目录下。 目的能够方便在不同场合下,或家里,或公司,在不同电脑上随时更新我的blog,而不用手动的拷贝hexo源文件 正文clone1git clone https://github.com/CreamBing/CreamBing.github.io.git 截图(idea)]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>迁移</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker离线安装]]></title>
    <url>%2F2018%2F08%2F21%2Fdocker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>docker</category>
        <category>离线</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>离线</tag>
        <tag>安装</tag>
      </tags>
  </entry>
</search>
