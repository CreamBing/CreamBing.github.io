<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[windows上安装docker-ce]]></title>
    <url>%2F2018%2F10%2F21%2Fwindows%E4%B8%8A%E5%AE%89%E8%A3%85docker-ce%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>windows</category>
        <category>docker</category>
        <category>安装</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>安装</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-compose搭建consul集群]]></title>
    <url>%2F2018%2F10%2F21%2Fdocker-compose%E6%90%AD%E5%BB%BAconsul%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>docker-compose</category>
        <category>consul集群</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>consul集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot+Aop+自定义注解实现日志记录]]></title>
    <url>%2F2018%2F10%2F21%2Fspringboot-Aop-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[前言 AOP（Aspect Orient Programming），也就是面向方面编程，作为面向对象编程的一种补充，专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在Java EE应用中，常常通过AOP来处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等。AOP实现的关键就在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理两大类，静态代理以AspectJ为代表；而动态代理则以Spring AOP为代表 目的简单说明一下AspectJ，另外实现一个springboot+Aop+自定义注解实现日志记录的梨子 正文AspectJAspectJ 是一个基于 Java 语言的 AOP 框架，提供了强大的 AOP 功能，其他很多 AOP 框架都借鉴或采纳其中的一些思想。AspectJ 是 Java 语言的一个 AOP 实现，其主要包括两个部分：第一个部分定义了如何表达、定义 AOP 编程中的语法规范，通过这套语言规范，我们可以方便地用 AOP 来解决 Java 语言中存在的交叉关注点问题；另一个部分是工具部分，包括编译器、调试工具等。AspectJ 是编译期增强的框架，需要遵从相关语法然后用他的工具编译织入 springboot aop添加依赖123456789101112&lt;!-- AOP依赖模块 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 测试 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667自定义注解@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface AnalysisActuator &#123; String note() default &quot;&quot;;&#125;定义切面@Aspect@Componentpublic class AnalysisActuatorAspect &#123; final static Logger log = LoggerFactory.getLogger(AnalysisActuatorAspect.class); ThreadLocal&lt;Long&gt; beginTime = new ThreadLocal&lt;&gt;(); @Pointcut(&quot;@annotation(analysisActuator)&quot;) public void serviceStatistics(AnalysisActuator analysisActuator) &#123; &#125; @Before(&quot;serviceStatistics(analysisActuator)&quot;) public void doBefore(JoinPoint joinPoint, AnalysisActuator analysisActuator) &#123; // 记录请求到达时间 beginTime.set(System.currentTimeMillis()); &#125; @After(&quot;serviceStatistics(analysisActuator)&quot;) public void doAfter(AnalysisActuator analysisActuator) &#123; log.info(&quot;statistic time:&#123;&#125;, note:&#123;&#125;&quot;, System.currentTimeMillis() - beginTime.get(), analysisActuator.note()); &#125;&#125;服务改写@Servicepublic class PersonServiceForAopImpl implements PersonService &#123; @AnalysisActuator(note = &quot;[PersonServiceForAopImpl]插入&quot;) @Override public int insert(Object obj) &#123; System.out.println(&quot;成功插入一个person&quot;); return 1; &#125; @AnalysisActuator(note = &quot;[PersonServiceForAopImpl]更新&quot;) @Override public int update(Object obj) &#123; System.out.println(&quot;成功更新一个person&quot;); return 1; &#125;&#125;测试服务@RunWith(SpringRunner.class)@SpringBootTestpublic class TestPersonServiceForAopImpl &#123; @Qualifier(&quot;personServiceForAopImpl&quot;) @Autowired PersonService personService; @Test public void testInsert()&#123; personService.insert(new Object()); &#125;&#125; 执行结果 参考资料1.Spring AOP实现原理与CGLIB应用2.使用Spring Boot的AOP处理自定义注解]]></content>
      <categories>
        <category>java</category>
        <category>springboot</category>
        <category>aop</category>
        <category>注解</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>aop</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CGLib代理]]></title>
    <url>%2F2018%2F10%2F21%2FCGLib%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言java动态代理这篇博客介绍了java的动态代理，那么这里同样不得不介绍一下CGLib代理。JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理.cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理 目的简单介绍一下cglib的代理应用 正文同样用java动态代理的那个梨子 cglib代理添加依赖12345&lt;dependency&gt; &lt;groupId&gt;cglib&lt;/groupId&gt; &lt;artifactId&gt;cglib&lt;/artifactId&gt; &lt;version&gt;3.2.4&lt;/version&gt;&lt;/dependency&gt;12345678910111213141516171819202122232425262728293031public class CglibProxyInterceptor implements MethodInterceptor &#123; //通过Enhancer 创建代理对象 private Enhancer enhancer = new Enhancer(); //通过Class对象获取代理对象 public &lt;T&gt; T getProxy(Class c)&#123; //设置创建子类的类 enhancer.setSuperclass(c); enhancer.setCallback(this); return (T)enhancer.create(); &#125; @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123; System.out.println(&quot;CglibProxyInterceptor 代理方法&quot;); return methodProxy.invokeSuper(o,objects); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); CglibProxyInterceptor proxy = new CglibProxyInterceptor(); PersonService personServiceProxy = proxy.getProxy(PersonServiceImpl.class); personServiceProxy.insert(new Object()); personServiceProxy.update(new Object()); &#125;&#125;执行结果与java动态代理相比123456相同点: 1.两个都新增了一个代理类，代理的类限制不大,扩展性很高 2.两种方式都不需要修改接口类以及实现类，只需要修改调用的地方即可，利用代理类调用不同点: 1.jdk动态代理需要对接口代理，cglib对非final修辞的类都可以代理 2.cglib是第三方包,需要添加依赖]]></content>
      <categories>
        <category>java</category>
        <category>CGLib</category>
        <category>代理</category>
      </categories>
      <tags>
        <tag>CGLib</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java动态代理]]></title>
    <url>%2F2018%2F10%2F21%2Fjava%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言java反射基础用法这边博客讲解了java反射的一些基础用法，那么动态代理就是利用反射实现的一个高级用法 目的简单介绍一下动态代理的用法，JDK提供的代理只能针对接口做代理,我们有更强大的代理CGLib代理 正文假设有个personservice服务类接口以及实现类，现如今需要在尽可能少量修改代码的前提下，让原来的方法增加一些其他方法1234567891011121314151617181920212223public interface PersonService &#123; //插入一个person int insert(Object obj); //更新一个person int update(Object obj);&#125;public class PersonServiceImpl implements PersonService &#123; @Override public int insert(Object obj) &#123; System.out.println(&quot;成功插入一个person&quot;); return 1; &#125; @Override public int update(Object obj) &#123; System.out.println(&quot;成功更新一个person&quot;); return 1; &#125;&#125; 静态代理123456789101112131415161718192021222324252627282930313233public class SimplePersonServiceProxy implements PersonService&#123; //被代理接口类 private PersonService personService; public SimplePersonServiceProxy(PersonService personService) &#123; this.personService = personService; &#125; @Override public int insert(Object obj) &#123; System.out.println(&quot;SimplePersonServiceProxy 插入静态代理方法&quot;); return personService.insert(obj); &#125; @Override public int update(Object obj) &#123; System.out.println(&quot;SimplePersonServiceProxy 更新静态代理方法&quot;); return personService.update(obj); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); //增加功能的调用方法，原来的PersonService和PersonServiceImpl代码都不需要变 PersonService proxy = new SimplePersonServiceProxy(new PersonServiceImpl()); proxy.insert(new Object()); proxy.update(new Object()); &#125;&#125; 执行结果: 动态代理12345678910111213141516171819202122232425262728public class DynamicProxyHandler implements InvocationHandler &#123; //被代理对象，这里跟静态代理对比，这里的代码扩展性更高，可以是任何对象 private Object object; public DynamicProxyHandler(Object object) &#123; this.object = object; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;DynamicProxyHandler java动态代理方法&quot;); return method.invoke(object,args); &#125; public static void main(String[] args) &#123; //原来的调用方式 PersonService personService = new PersonServiceImpl(); personService.insert(new Object()); personService.update(new Object()); System.out.println(&quot;**********************&quot;); //增加功能的调用方法，原来的PersonService和PersonServiceImpl代码都不需要变 PersonService proxy = (PersonService) Proxy.newProxyInstance(PersonService.class.getClassLoader(),new Class[]&#123;PersonService.class&#125;,new DynamicProxyHandler(new PersonServiceImpl())); proxy.insert(new Object()); proxy.update(new Object()); &#125;&#125; 执行结果:对比两种方式，我们可以得出结论123456789相同点: 1.两个都新增了一个代理类，并且属性都是代理类，只不过静态代理的属性限制的更大，必须是 代理接口类 2.两种方式都不需要修改接口类以及实现类，只需要修改调用的地方即可，利用代理类调用不同点 1.静态代理需要实现代理接口，并且属性为代理类接口，这说明每个接口都需要实现一个静态代 理类，扩展性不高，正因为如此，其每个代理的类中的方法可以各自写相关的代理方法 2.动态代理类由于其属性为Object,所以可以代理任何接口,扩展性高，不过由于每个方法执行 前的代理方法都是一样的，所以更适合做一些通用的代理]]></content>
      <categories>
        <category>java</category>
        <category>动态代理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java反射基础用法]]></title>
    <url>%2F2018%2F10%2F15%2Fjava%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言Java让我们在运行时识别对象和类的信息，主要有2种方式:12传统的RTTI，它假定我们在编译时已经知道了所有的类型信息;反射机制，它允许我们在运行时发现和使用类的信息; 目的简单介绍一下反射的机制和应用. 正文class对象class对象包含了与类有关的信息,是用来创建所有“常规”对象的.每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类.Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的 扩展1234567891011121314151617181920212223242526272829303132public class TestClass &#123; public static void main(String[] args) &#123; //静态内部类-静态属性 System.out.println(InnerClass.staticName); System.out.println(&quot;**************************&quot;); //静态内部类-普通属性 InnerClass in = new InnerClass(); System.out.println(in.name); System.out.println(&quot;**************************&quot;); //外部类-普通属性 System.out.println(new OutterClass().outterName); System.out.println(&quot;**************************&quot;); //外部类-静态属性 System.out.println(OutterClass.outterStaticName); &#125; static class InnerClass &#123; public static String staticName = &quot;innerStaticName&quot;; public String name = &quot;innerName&quot;; static &#123; System.out.println(&quot;静态内部类静态块&quot;); &#125; public InnerClass() &#123; System.out.println(&quot;静态内部类已经构造好了&quot;); &#125; &#125;&#125;上面代码运行的结果:结论: 说明当第一次引用一个类的静态属性时，该类会加载到jvm中并调用静态块初始化类时会调用相应构造方法，由于该类已经加载到jvm中，所以不会调用静态块第三点同时印证了第二点，第一次初始化某个类时，该类加载到jvm中，首先调用静态块方法，然后调用相应构造方法第四点印证第二点 获取class对象引用的两种方式及区别12使用功能”.class”来创建Class对象的引用使用功能Class.forName(“xxx”) 区别:想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤:123加载：由类加载器完成，找到对应的字节码，创建一个Class对象链接：验证类中的字节码，为静态域分配空间初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 扩展1234567891011121314151617181920212223242526272829303132333435363738394041public class BaseMain &#123; public static void main(String[] args) throws Exception &#123; //通过obj.class获取class对象的引用 Class clz1 = StaticBase.class; System.out.println(&quot;*********************&quot;); //通过Class.获取class对象的引用--静态内部类 Class clz2 = Class.forName(&quot;com.example.demo.java.reflect.BaseMain$StaticBase&quot;); //通过Class.获取class对象的引用--普通内部类 Class clz3 = Class.forName(&quot;com.example.demo.java.reflect.BaseMain$Base&quot;); System.out.println(&quot;*********************&quot;); //内部类的构造方法获取 clz3也可以换成Base.class Constructor con3 = clz3.getDeclaredConstructor(BaseMain.class); //私有构造需要设置 con3.setAccessible(true); Object obj3 = con3.newInstance(BaseMain.class.newInstance()); &#125; static class StaticBase &#123; static int num = 1; static &#123; System.out.println(&quot;StaticBase 静态块:num = &quot; + num); &#125; &#125; public class BaseParent&#123; public BaseParent() &#123; System.out.println(&quot;父类被构造了&quot;); &#125; &#125; private class Base extends BaseParent&#123; int num = 2; private Base() &#123; System.out.println(&quot;普通内部类被构造了:num = &quot; + num); &#125; &#125;&#125;执行结果:结论123obj.class确实不会初始化类Class.forName会调用静态块初始化子类构造先初始化父类构造 反射获取私有属性和方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class ReflectDemo &#123; public static void main(String[] args) throws Exception &#123; OutterClass out = new OutterClass(); System.out.println(&quot;***************&quot;); getAllFields(out); System.out.println(&quot;***************&quot;); getAllMethods(out); &#125; /** * 获取一个对象的所有属性 * @param obj */ public static void getAllFields (Object obj) throws Exception&#123; //获取该类包括父类的属性，未注释的表示只有该类的 //Field[] fields = obj.getClass().getFields(); Field[] fields = obj.getClass().getDeclaredFields(); for(Field f : fields)&#123; f.setAccessible(true); System.out.println(&quot;属性-值:&quot;+f.getName()+&quot;-&quot;+f.get(obj)); &#125; &#125; public static void getAllMethods (Object obj) throws Exception &#123; //获取该类包括父类的属性，未注释的表示只有该类的 //Method[] methods = obj.getClass().getMethods(); Method[] methods = obj.getClass().getDeclaredMethods(); for(Method m : methods)&#123; m.setAccessible(true); System.out.println(m+&quot;\n参数个数:&quot;+m.getParameterCount()); switch (m.getParameterCount())&#123; case 0: m.invoke(obj); break; case 1: m.invoke(obj,&quot;hello&quot;); break; default: System.out.println(&quot;参数个数大于1&quot;); &#125; &#125; &#125;&#125; 执行结果:]]></content>
      <categories>
        <category>java</category>
        <category>语法</category>
        <category>反射</category>
      </categories>
      <tags>
        <tag>java语法</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[okhttp3链式调用]]></title>
    <url>%2F2018%2F10%2F13%2Fokhttp3%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言HTTP是现代应用常用的一种交换数据和媒体的网络方式，高效地使用HTTP能让资源加载更快，节省带宽。OkHttp是一个高效的HTTP客户端，它有以下默认特性：1234支持HTTP/2，允许所有同一个主机地址的请求共享同一个socket连接连接池减少请求延时透明的GZIP压缩减少响应数据的大小缓存响应内容，避免一些完全重复的请求 目的介绍一些okhttp3的基本用法 正文获取OkHttpClient客户端12345678//简单获取OkHttpClient client = new OkHttpClient();//设置超时时间private static final OkHttpClient client = new OkHttpClient.Builder() .connectTimeout(10, TimeUnit.SECONDS) .readTimeout(20, TimeUnit.SECONDS) .build(); get请求普通get请求1234567891011121314String url = &quot;https://www.baidu.com/&quot;;OkHttpClient okHttpClient = new OkHttpClient();Request request = new Request.Builder() .url(url) .build();Call call = okHttpClient.newCall(request);try &#123; Response response = call.execute(); if (response.isSuccessful()) &#123; System.out.println(response.body().string()); &#125;&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 设置header参数可以设置例如Cookie，User-Agent什么的123456Request request = new Request.Builder() .url(url) .header(&quot;键&quot;, &quot;值&quot;) .header(&quot;键&quot;, &quot;值&quot;) ... .build(); post请求普通的表单提交1234567891011121314151617181920String url = &quot;https://www.baidu.com/&quot;;OkHttpClient okHttpClient = new OkHttpClient();RequestBody body = new FormBody.Builder() .add(&quot;键&quot;, &quot;值&quot;) .add(&quot;键&quot;, &quot;值&quot;) .build();Request request = new Request.Builder() .url(url) .post(body) .build();Call call = okHttpClient.newCall(request);try &#123; Response response = call.execute(); System.out.println(response.body().string());&#125; catch (IOException e) &#123; e.printStackTrace();&#125; 参考资料OkHttp3的基本用法 简书 许宏川]]></content>
      <categories>
        <category>java</category>
        <category>http调用客户端</category>
      </categories>
      <tags>
        <tag>http调用客户端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xxl-job-V1.9.1实现jobapi远程调用]]></title>
    <url>%2F2018%2F10%2F12%2Fxxl-job-V1-9-1%E5%AE%9E%E7%8E%B0jobapi%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言xxl-job是一个非常好用的分布式java任务调度框架,目前实际应用中框架建议我们在其管理页面手动新增调度任务,但是由于一些情况,我们更加希望能够通过代码动态添加job,官方在job-core中提供了相关api,位置:com.xxl.job.core.biz.AdminBiz.java但是提供的功能有限,无法满足我们的需求,但是根据后面官方的说法，可以通过修改xxl-jobadmin的源码,实现其部分接口可以绕过登陆来远程调用 目的通过修改xxl-jobadmin的源码,实现其部分接口可以绕过登陆来远程调用:1234567任务列表查询任务新增任务更新任务删除任务暂停任务恢复任务触发 正文下载xxl-job-v1.9.1的源码xxl-job-v1.9.1 下载地址 目前我们用的是v1.9.1的,此版本适合这种方式，如果是后续版本建议看一下官方文档，没准官方给出了更合适的方法 修改源码重新打包准确修改位置为com.xxl.job.admin.controller.JobInfoController中的接口方法上加上@PermessionLimit(limit = false) 测试通过postman调用接口,一个是未修改源码的,请求被登陆拦截修改源码后，调用后通过json方式返回 参考资料1.官方针对远程调用的方法解决]]></content>
      <categories>
        <category>java</category>
        <category>分布式</category>
        <category>任务调度框架</category>
      </categories>
      <tags>
        <tag>xxl-job</tag>
        <tag>分布式java调度框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux上安装docker-compose]]></title>
    <url>%2F2018%2F09%2F10%2Flinux%E4%B8%8A%E5%AE%89%E8%A3%85docker-compose%2F</url>
    <content type="text"><![CDATA[前言linux上安装docker-compose,为了在安装了docker的机器上更加方便的编排容器 目的利用docker-compose快速编排docker容器 正文wget1wget https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64 如果wget没有安装,利用下面命令安装1yum install wget另外如果wget下载不下来,因为直接从github上下载,国内可能网速并不理想docker-compose v1.22.0 下载提取码:ixnx mv并设置环境变量1234567891011mv docker-compose-Linux-x86_64 docker-composemkdir -p /apps/softs/docker_compose/cd /apps/softs/docker_compose/cp /dev/zkandkafka/docker-compose /apps/softs/docker_compose/chmod +x docker-compose修改环境变量vi /etc/profileDOCKER_COMPOSE_HOME=/apps/softs/docker_compose/PATH=$PATH:$DOCKER_COMPOSE_HOMEexport PATHsource /etc/profile 验证1docker-compose -v 其他docker-compose版本]]></content>
      <categories>
        <category>docker-compose</category>
        <category>docker服务编排工具</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>docker服务编排工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java程序打成docker镜像]]></title>
    <url>%2F2018%2F08%2F25%2Fjava%E7%A8%8B%E5%BA%8F%E6%89%93%E6%88%90docker%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[前言本片教程适合idea+java+maven的环境,另外需要有docker环境,如果windows上没有，可以将程序拷贝到linux上有docker的环境上执行相关操作docker环境安装教程[] 目的将java程序打进docker镜像中,方便docker方式部署 正文mavne添加以下依赖并执行生成Dockerfile在pom文件的bulid中添加如下驱动123456789101112131415161718192021&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;api&lt;/imageName&gt; &lt;baseImage&gt;java&lt;/baseImage&gt; &lt;maintainer&gt;test@email.com&lt;/maintainer&gt; &lt;workdir&gt;/ROOT&lt;/workdir&gt; &lt;cmd&gt;["java", "-version"]&lt;/cmd&gt; &lt;entryPoint&gt;["java", "-jar", "$&#123;project.build.finalName&#125;.jar"]&lt;/entryPoint&gt; &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/ROOT&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt;执行docker_build之后会自动生成Dockerfile,如果你的windows上有docker,会生成镜像,由于我的机器上没有，因为新版的docker安装到window上有系统限制，详情查看这篇博客[]Dockerfile内容如下123456FROM javaMAINTAINER test@email.comWORKDIR /ROOTADD /ROOT/xxx.jar /ROOT/ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;xxx.jar&quot;]CMD [&quot;java&quot;, &quot;-version&quot;] 转移到linux上有docker环境的机器上开始build修改一下Dockerfile,将配置文件也打入进去,上面驱动也可以改造成通过Dockerfile打包,而不是写到pom中1234567FROM javaMAINTAINER test@email.comWORKDIR /ROOTADD ./xxx.jar /ROOT/ADD ./conf /ROOT/ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;xxx.jar&quot;]CMD [&quot;java&quot;, &quot;-version&quot;]linux上目录结构如下执行build指令1docker build -t job:0814 .终端打印成功截图docker images验证截图]]></content>
      <categories>
        <category>java</category>
        <category>Dockerfile</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>java</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker镜像迁移]]></title>
    <url>%2F2018%2F08%2F24%2Fdocker%E9%95%9C%E5%83%8F%E8%BF%81%E7%A7%BB%2F</url>
    <content type="text"><![CDATA[前言一般正规的做法应该是将自己做好的镜像push到远程仓库去,然后需要的时候从远处仓库拉取.由于目前我还没有建立私有远程仓库所以这篇博客主要是讲手动导出镜像的方法 目的手动导出镜像以便于在其他地方使用 正文查看镜像列表1docker images save导出镜像指令: docker save repository:tag &gt; 自定义导出名字.tar 推荐或者 docker save image_id &gt; 自定义导出名字.tar1docker save webapi:0814 &gt; webapi0814.tar截图: load导入镜像1docker load -qi webapi0814.tar 截图:验证:docker images 查看一下导入情况,这里说明一下,如果之前指令是通过save imageid导出的镜像的话,这里导入的时候仓库和标签名可能为空,推荐save repository:tag导出]]></content>
      <categories>
        <category>docker</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>镜像</tag>
        <tag>迁移</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker离线安装包准备]]></title>
    <url>%2F2018%2F08%2F23%2Fdocker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[前言在一台有网络的centos上准备docker-ce.18离线安装包,然后可以根据docker离线安装这篇博客离线安装docker下面的操作都是在有网络的centos7上进行操作的 目的为离线安装docker提供相关依赖和程序包 正文建立本地文件夹1mkdir -p /apps/docker/packages 修改yum源镜像地址先看一下有没有wget ,没有先装一下，在备份1yum install wget备份原来的repo123cd /etc/yum.repos.d/mkdir backupmv ./CentOS-* ./backup/下载阿里的镜像源并应用123wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repoyum clean allyum makecache截图: 下载createrepo软件包及其依赖1repotrack -a x86_64 -p /apps/docker/packages createrepo 如果上诉指令不存在,先安装yum-utils1yum install -y yum-utils截图:再次执行repotrack上面那个指令,开始下载依赖包截图:下载libgudev1和systemd-sysv，是因为centos7.2的libgudev1和systemd-sysv依赖systemd-219-19.el7.x86_64，而docker-ce需要systemd-219-30el7.x86_64.下载 libgudev1和systemd-sysv软件包机器依赖12repotrack -a x86_64 -p /apps/docker/packages libgudev1repotrack -a x86_64 -p /apps/docker/packages systemd-sysv 下载docker-ce及依赖由于你的yum远程仓库可能没有docker-ce的相关依赖,建议之前先执行下面的命令添加阿里的docker仓库镜像1yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo然后下载docker-ce相关依赖1repotrack -a x86_64 -p /apps/docker/packages docker-ce 压缩下载执行下面的命令,将在/apps/docker目录下生成一个docker-ce-18-offline-yum.tgz的包,这个包通过xftp下载后可以在其他地方离线安装docker只要离线的电脑上有yum命令并且是centos7以上的系统12cd /apps/dockertar -zcvf docker-ce-18-offline-yum.tgz /apps/docker/packages]]></content>
      <categories>
        <category>docker</category>
        <category>离线</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>离线</tag>
        <tag>安装包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo在多台电脑之间迁移写作]]></title>
    <url>%2F2018%2F08%2F21%2Fhexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E4%B9%8B%E9%97%B4%E8%BF%81%E7%A7%BB%E5%86%99%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言首先根据[]这篇博客将hexo部署到github上,注意最后的效果需是hexo源文件包在远程dev分支下，hexo编译后的静态文件在master目录下。 目的能够方便在不同场合下,或家里,或公司,在不同电脑上随时更新我的blog,而不用手动的拷贝hexo源文件 正文clone1git clone https://github.com/CreamBing/CreamBing.github.io.git 截图(idea)]]></content>
      <categories>
        <category>博客</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>迁移</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker离线安装]]></title>
    <url>%2F2018%2F08%2F21%2Fdocker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>docker</category>
        <category>离线</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>离线</tag>
        <tag>安装</tag>
      </tags>
  </entry>
</search>
